<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>p1um&#39;s blog</title>
    <link>https://p1um3r.github.io/</link>
    <description>Recent content on p1um&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Jul 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://p1um3r.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RSA解题总结</title>
      <link>https://p1um3r.github.io/blog/rsa%E8%A7%A3%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 11 Jul 2023 08:00:00 +0800</pubDate>
      
      <guid>https://p1um3r.github.io/blog/rsa%E8%A7%A3%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;rsa解题总结&#34;&gt;RSA解题总结&lt;/h1&gt;
&lt;h2 id=&#34;1一般情况&#34;&gt;1、一般情况&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;加密&#34;&gt;加密&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;解密&#34;&gt;解密&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;p = 1325465431
q = 152317153
e = 65537
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; libnum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;phi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(e, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, phi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(c, d, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(libnum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n2s(int(m)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法二：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.PublicKey &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; RSA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; PKCS1_OAEP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gmpy2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; binascii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;phi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(e, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, phi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsa_components &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (n, e, int(d), p, q)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arsa &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RSA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;construct(rsa_components)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsakey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RSA&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;importKey(arsa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exportKey())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rsakey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PKCS1_OAEP&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(rsakey)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;decrypted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsakey&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(c)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(decrypted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 用于加密时经过填充，导致c和n长度一样的情况，此时用pow解会出现乱码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2共模数攻击&#34;&gt;2、共模数攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何两个用户具有相同的模数都是不安全的，因为每个用户都可以轻松地将模数分解。&lt;/p&gt;
&lt;p&gt;假设用户生成了$r$个拥有共模数$N$的$RSA$素数，可以得到$r$个方程式：
$$
\begin{equation}
\begin{split}
e_1d_1 =&amp;amp; 1 + k_1\lambda(N)\newline
&amp;amp;\vdots\newline
e_rd_r =&amp;amp; 1 + k_r\lambda(N)
\end{split}
\end{equation}
$$
其中 $k_i&amp;lt;d_i$恒成立。由于每个私有指数$e$都很小，所以我们假设每个公共指数都是足够大的。&lt;/p&gt;
&lt;p&gt;共模数攻击是基于维纳攻击&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/RSA%E8%A7%A3%E9%A2%98%E6%80%BB%E7%BB%93/image-20230806165716546.png&#34; alt=&#34;image-20230806165716546&#34;&gt;&lt;/p&gt;
&lt;p&gt;$$
e_id_i=1+k_i\lambda(N)=1+\frac{k_i}{g}\phi(N)=1+\frac{k_i}{g}(N-s)
$$
我们用$W_i$来表示$g$乘以第$i$个密钥方程。写作：
$$
W_i:e_id_ig-k_iN=g-k_is
$$
$W_i$是维纳攻击的起点。&lt;/p&gt;
&lt;p&gt;由于每个人方程式中的$\lambda(N)$的值都相同，所以可以将任意两个方程式结合起来来获得一个不含$\lambda(N)$的新方程。
$$
e_id_i=1+k_i\lambda(N)\newline
e_jd_j=1+k_j\lambda(N)\newline
k_je_id_i=k_j+k_jk_i\lambda(N)\newline
k_ie_jd_j=k_i+k_jk_i\lambda(N)\newline
$$
合并得到：
$$
G_{i,j}:k_id_je_j-k_jd_ie_i=k_i-k_j
$$
这个方程式$G_{i,j}$是共模数攻击的起点。&lt;/p&gt;
&lt;p&gt;对于每个例子，我们可以假定公共指数足够大（$e_i\approx N$)，$g=\gcd(p-1,q-1)$较小（假定$\frac{g}{k_i}&amp;lt;1$恒成立）&lt;/p&gt;
&lt;p&gt;这种攻击方式是一种基于格的攻击。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;证明&#34;&gt;证明&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用上述，我们考虑两个有共模数$N$的$RSA$，每个的私有指数都小于$N^{\delta_2}$，我们得到以下几个方程：
$$
k_2W_1:k_2d_1ge_1-k_2k_1N=k_2(g-k_1s)\newline
gG_{1,2}:k_1d_2ge_2-k_2d_1ge_1=g(k_1-k_2)\newline
W_1W_2:d_1d_2g^2e_1e_2-d_1k_2ge_1N-d_2k_1ge_2N+k_1k_2N^2=(g-k_1s)(g-k_2s)
$$
同时，平凡方程$k_1k_2=k_1k_2$可以写成向量矩阵方程$x_2 \mathcal{B}_2 =v_2$，其中：
$$
\begin{align}
x_2&amp;amp;=(k_1k_2,k_2d_1g,k_1d_2g,d_1d_2g^2)\newline
\mathcal{B}_2&amp;amp;=
\begin{bmatrix}
1&amp;amp;-N&amp;amp;0&amp;amp;N^2\newline
&amp;amp;e_1&amp;amp;-e_1&amp;amp;-e_1N\newline
&amp;amp;&amp;amp;e_2&amp;amp;-e_2N\newline
&amp;amp;&amp;amp;&amp;amp;e_1e_2
\end{bmatrix}\newline
v_2&amp;amp;=(j_1k_2,k_2(g-k_1s),g(k_1-k_2),(g-k_1s)(g-k_2s))
\end{align}
$$
$v_2$是$\mathcal{B}_2$中行向量的线性组合，同时也是由$\mathcal{B}_2$的行向量生成的格$\mathcal{L}_2$中的一个向量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;攻击流程&#34;&gt;攻击流程&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.攻击者获得两个或多个$RSA$公钥，它们共用相同的模数$n$。&lt;/p&gt;
&lt;p&gt;2.攻击者选取一个消息$m$，并对其进行加密，得到密文$c_1=m^{e_1} \bmod n$和$c_2=m^{e_2} \bmod n$，其中$e_1$和$e_2$分别是两个公钥中的指数&lt;/p&gt;
&lt;p&gt;3.攻击者寻找模数$n$和两个指数$e_1$和$e_2$的最大公约数$\gcd(e_1,e_2)$，并将其命名为$g$。&lt;/p&gt;
&lt;p&gt;4.如果$g$不等于 1，则说明攻击者找到了至少一个质因数$p$或$q$,并可以用它来推导$RSA$私钥中的指数$d$。&lt;/p&gt;
&lt;p&gt;5.通过继续计算，攻击者可以确定私钥中的指数$d$，并从而获得原始消息$m$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; gmpy2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gcdext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; libnum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xa6241c28743fbbe4f2f67cee7121497f622fd81947af30f327fb028445b39c2d517ba7fdcb5f6ac9e6217205f8ec9576bdec7a0faef221c29291c784eed393cd95eb0d358d2a1a35dbff05d6fa0cc597f672dcfbeecbb14bd1462cb6ba4f465f30f22e595c36e6282c3e426831d30f0479ee18b870ab658a54571774d25d6875&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3045&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff4d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5d1e39bc751108ec0a1397d79e63c013d238915d13380ae649e84d7d85ebcffbbc35ebb18d2218ccbc5409290dfa8a4847e5923c3420e83b1a9d7aa67190dc0d34711cce261665c64c28ed2834394d4b181926febf7eb685f9ce81f36c7fb72798da3a14a123287171d26e084948aab0fba81c53f10b5696fc291006254ee690&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3d90f2bec4fe02d8ce4cece3ddb6baed99337f7e6856eef255445741b5cfe378390f058679d70236e51be4746db4c207f274c40b092e24f8c155a0957867e84dca48e27980af488d2615a280c6eadec2f1d30b95653b1ee3135e2edff100dd2c529994f846722f811348b082d0bec7cfab579a4bd0ab789928b1bebed68d628f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g, r, s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcdext(e1, e2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(c1, r, n) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pow(c2, s, n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(libnum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n2s(int(m)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3低加密指数广播攻击&#34;&gt;3、低加密指数广播攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;适用情况&#34;&gt;适用情况&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e很小，并且使用了相同的加密指数e给若干个接收者发送相同的信息&lt;/p&gt;
&lt;p&gt;例如当$e=3$时，有以下等式成立：
$$
c_1 = pow(m,e,n_1)\newline
c_2 = pow(m,e,n_2)\newline
c_3 = pow(m,e,n_3)\newline
&amp;hellip;
$$
对上列等式运用中国剩余定理，得到
$$
c_x = pow(m,e,n_1&lt;em&gt;n_2&lt;/em&gt;n_3*&amp;hellip;)
$$
随后再进行低加密指数攻击。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;实现-1&#34;&gt;实现&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gmpy2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reduce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CRT&lt;/span&gt;(clist, nlist):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reduce(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x, y: x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y, nlist)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c, n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(clist, nlist):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d, r, s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gcdext(n, m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input not pairwise co-prime&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; N, N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;142782424368849674771976671955176187834932417027468006479038058385550042422280158726561712259205616626939123504489410624745195777853423961104590708231562726165590769610040722589287393102301338152085670464005026301781192671834390892019478189768725018303217559795377795540494239283891894830166363576205812991157&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;153610425077816156109768509904751446801233412970601397035720458311275245730833227428213917577405780162151444202393431444812010569489900435979730559895340377469612234558042643742219128033827948585534761030527275423811282367831985007507137144308704413007806012914286105842311420933479771294576841956749281552971&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;152540067782701001222493009941492423063369171831039847414320547494725020441901272486665728360741395415762864872737675660423920609681185809510355937534756399208661762715484879562585724584849261266873624875852300611683382543315580370484972470694466195837255994159609193239840228218925381488410059939975556977947&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125842716702134814646356078531900645012495638692517778270527426844383063904041812273637776798591687732598509470005151551320457132061693618473039437320011446697406190781306264437609046721508738109650829547010385875425097336266103994639126319889016342284747700714199556143378526590058467791687837422897022829661&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116144389285266462769913139639175922392318396923181100785008570884082681963637784423143843845816350379438789947802939701820129805341796427821894273985551331666719808355412080909245720551238149511778060242720419584504473490216670437024863860559347959698828131475160058721701582089480924088773887932997353631767&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127833907448946785858374094953899556339175475846831397383049660262333005992005484987913355932559627279178940862787593749842796469355336182379062826441222705075178971785791223706944120681105575965622931327112817747065200324610697178273898956820957640413744954233327851461318200323486469677469950386824833536523&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130561613227079478921314550968562766645507834694262831586725464124109153306162445639759476845681271537955934718244296904503168256991962908095007040044300188572466395275317838178325500238288302672390013747102961340256309124310478931896245221622317302428447389760864327859640573452084295225059466376349115703119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115953389401040751013569404909249958538962411171147823610874077094621794755967854844224923689925397631692572916641171075740839099217316101334941033937183815345038898177087515909675028366437302462022970987947264115373697445950951595479758872029099661065186221250394358255523574834723958546450323357472451930993&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143437107845384843564651522639125300763388830136500260725097766445883003928355325003575359566631064630487365774344508496878731109174874449170057678821440711511966073934025028100604234445470976333825866939923998344367645612128590820812489407412175198698290167077116185959180877334222693344630253253476594907313&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;85033868418784308573673709960700777350314426427677627319697346811123742342359072170220428874952996988431950989321281905284522596263957356289624365171732095210045916218066135140320107686084053271623461104022705353814233772164502775939590711842361956121603943483040254727995655776263673058788416722141673409688&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66065963470666895005407449599703926269325406456711861190876894466341571726360462706664546294453572319565476664348345756905411939632955966517708138047546806602828064213238537646393524578984547577761559965654539771172357089802682793169968961304179886652390277814477825753096636750388350662980872556701402397564&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116011740820520887443111656288411611070614127688662643257265381793048354928820176624229624692124188995846076431510548507016903260774215950803926107831505634778278712070141663189086436127990584944132764896694777031370995058271038329228336417590284517922855284619653301817355115583540545182119702335431334401666&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97640420284096094887471273365295984332267897927392169402918423863919914002451127544715668846623138003564829254309568918651163254043205129883843425179687841236818720463784828905460885026290909768599562386370732119591181513319548915478512030197629196018254041500662654260834562708620760373487652389789200792120&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8112507653841374573057048967617108909055624101437903775740427861003476480616929517639719198652146909660899632120639789106782550275648578142883715280547602249589837441805676364041484345030575130408744621981440093280624046635769338568542048839419939250444929802135605724150484414516536378791500915047844188300&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;36792148360808115566234645242678223867680969786675055638670907933041180936164293809961667801099516457636164692292891528415720085345494773373966277807505798679784807614784581861287048096977968620964436947452527540958289441390882589051225367658014709290392321808926567572528170531844664734909469690750971883323&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53043093283305492238903255767698153246673671181809989362223466090875767705978690531154079519999671834688647277179370374802495005937892824566602423646978168777735383632928274082669949750078161820002768640908750005814934158829006019656592134357897586040866207754535586785064545866404380204728594863102313407789&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88499407133762624445946519155722583633934260410706930537441122463087556094734626189377091740335667052378955691250910459790202385799502439716173363179773811920751410726795431402796346647688144853156900427797933862087074385441977254140336390678022955770879265490567987868532251217565094093318626424653599450992&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138337520305048557335599940473834485492131424901034295018189264168040969172072024612859307499682986987325414798210700710891033749119834960687318156171051379643844580970963540418974136891389303624057726575516576726845229494107327508855516437230240365759885913142671816868762838801720492804671259709458388192984&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x, n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CRT(c, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m, flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iroot(x, e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;m&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not decode m&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4素数分解&#34;&gt;4、素数分解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、n值为&lt;strong&gt;临近&lt;/strong&gt;素数相乘得到可用yafu分解&lt;/p&gt;
&lt;h2 id=&#34;5低加密指数攻击&#34;&gt;5、低加密指数攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;原理-1&#34;&gt;原理&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 RSA 中 e 也称为加密指数。&lt;/p&gt;
&lt;p&gt;由于 e 是可以随意选取的，选取小一点的 e 可以缩短加密时间，但是选取不当的话，就会造成安全问题。&lt;/p&gt;
&lt;p&gt;若$m^3 &amp;lt; n$，即$c = m^3$&lt;/p&gt;
&lt;p&gt;若$m^3 &amp;gt; n$但并非$m^3 \gg n$，即$c = (m^3 + i * n) \bmod n$，其中$i$是我们需要爆破的系数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;实现-2&#34;&gt;实现&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若$m^3 &amp;lt; n$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gmpy2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22885480907469109159947272333565375109310485067211461543881386718201442106967914852474989176175269612229966461160065872310916096148216253429849921988412342732706875998100337754561586600637594798877898552625378551427864501926224989873772743227733285336042475675299391051376624685754547818835551263597996620383338263448888107691240136257201191331617560711786674975909597833383395574686942099700631002290836152972352041024137872983284691831292216787307841877839674258086005814225532597955826353796634417780156185485054141684249037538570742860026295194559710972266059844824388916869414355952432189722465103299013237588737&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15685364647213619014219110070569189770745535885901269792039052046431067708991036961644224230125219358149236447900927116989931929305133870392430610563331490276096858863490412102016758082433435355613099047001069687409209484751075897343335693872741&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m, flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iroot(c, e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;m&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not decode m&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若$m^3&amp;gt;n$但并非$m^3\gg n$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gmpy2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114976915747243387792157708464120735018971336213935438953074748276198282761939060395482051056351068439137722626185590043024556656813730840050547350912425438364703854627760482842307943026011880815011654341047422453012558617703411700393668892701036222135444420377515575624398723436532681305293727164639582093389&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5828813410620741112500628876643872258919868379601617907887884191584237969605489971465692568848339200057188383649365078832766143513766368216471491824042974016773526107276856706832404477882581400769791378958901067683158857990261489285951805740071223765359992165262854641069674603160977034446644199945940251030&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m, flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iroot(c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n, e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;m&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6低解密指数攻击-wiener-attack&#34;&gt;6、低解密指数攻击 (Wiener Attack)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;实现-3&#34;&gt;实现&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gmpy2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;transform&lt;/span&gt;(x, y):  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用辗转相处将分数 x/y 转为连分数的形式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; y:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(x&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;continued_fraction&lt;/span&gt;(sub_res):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    numerator, denominator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sub_res[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:  &lt;span style=&#34;color:#75715e&#34;&gt;# 从sublist的后面往前循环&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        denominator, numerator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; numerator, i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;numerator&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;denominator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; denominator, numerator  &lt;span style=&#34;color:#75715e&#34;&gt;# 得到渐进分数的分母和分子，并返回&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 求解每个渐进分数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_fraction&lt;/span&gt;(x, y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; transform(x, y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 将连分数的结果逐一截取以求渐进分数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(continued_fraction, (res[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(res)))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_pq&lt;/span&gt;(a, b, c):  &lt;span style=&#34;color:#75715e&#34;&gt;# 由p+q和pq的值通过维达定理来求解p和q&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    par &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isqrt(b&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c)  &lt;span style=&#34;color:#75715e&#34;&gt;# 由上述可得，开根号一定是整数，因为有解&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x1, x2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;par)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a), (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;par)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x1, x2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wienerAttack&lt;/span&gt;(e, n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (d, k) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sub_fraction(e, n):  &lt;span style=&#34;color:#75715e&#34;&gt;# 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# 可能会出现连分数的第一个为0的情况，排除&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        phi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (e&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;k  &lt;span style=&#34;color:#75715e&#34;&gt;# 这个结果就是 φ(n)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        px, qy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_pq(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;phi&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; px&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;qy &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p, q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(int(px)), abs(int(qy))  &lt;span style=&#34;color:#75715e&#34;&gt;# 可能会得到两个负数，负负得正未尝不会出现&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(e, (p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(q&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;该方法不适用&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gtlt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77310199867448677782081572109343472783781135641712597643597122591443011229091533516758925238949755491395489408922437493670252550920826641442189683907973926843505436730014899918587477913032286153545247063493885982941194996251799882984145155733050069564485120660716110828110738784644223519725613280140006783618393995138076030616463398284819550627612102010214315235269945251741407899692274978642663650687157736417831290404871181902463904311095448368498432147292938825418930527188720696497596867575843476810225152659244529481480993843168383016583068747733118703000287423374094051895724494193455175131120243097065270804457787026492578916584536863548445813916819417857064037664101684455000184987531252344582899589746272173970083733130106407810619258077266603898529285634495710846838011858287024329514491058790557305041389614650730267774482954666726949886313386881066593946789460028399523245777171320319444673551268379126203862576627540177888290265714418064334752499940587750374552330008143708562065940245637685833371348603338834447212248648869514585047871442060412622164276894766238383894693759347590977926306581080390685360615407766600573527565016914830132066428454738135380178959590692145577418811677639050929791996313180297924833690095&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gtlt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wienerAttack(e, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(c, d, n)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7p---1光滑数分解&#34;&gt;7、$p - 1$光滑数分解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;前置知识&#34;&gt;前置知识&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;费马小定理$(Fermat Theorem)$：若$p$是素数，且$p \nmid a$,则$a^{p-1} \equiv 1(\bmod p)$&lt;/p&gt;
&lt;p&gt;​                 $//$本来是$a^p \equiv a(\bmod p)$，为了方便我们写成上面的形式&lt;/p&gt;
&lt;p&gt;$B-Smooth$数：如果一个整数的所有素因子都不大于B，我们称这个整数为$B-Smooth$数。&lt;/p&gt;
&lt;p&gt;例$1:12=2&lt;em&gt;2&lt;/em&gt;3$，因此$12$是$3-Smooth$的数&lt;/p&gt;
&lt;p&gt;例$2:30=2&lt;em&gt;3&lt;/em&gt;5$，因此$130$是$5-Smooth$的数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;光滑数 (Smooth number)：指可以分解为小素数乘积的正整数&lt;/p&gt;
&lt;p&gt;当p是N 的因数，并且p−1是光滑数，可以考虑使用&lt;code&gt;Pollard&#39;s p-1&lt;/code&gt;算法来分解N&lt;/p&gt;
&lt;p&gt;当p是N的因数，并且p+1是光滑数，可以考虑使用&lt;code&gt;Williams&#39;s p+1&lt;/code&gt;算法来分解N&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;原理&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设$p-1$是$B-Smooth$的，可设$p-1=p_1p_2&amp;hellip;p_n(\forall 1\le i\le n,p_i\le B)$&lt;/p&gt;
&lt;p&gt;若$p_1,p_2,&amp;hellip;,p_n$两两不同，则$p_1p_2&amp;hellip;p_n\mid B! \Rightarrow (p-1)\mid B!\Rightarrow B!=k(p-1)$。因此$a^{B!} \equiv a^{k(p-1)}\equiv 1(\bmod p)$&lt;/p&gt;
&lt;p&gt;假设$N=pq$，计算$\gcd(a^{B!}-1, N)$，只要结果大于$0$小于$N$，那么结果就为$p$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/RSA%E8%A7%A3%E9%A2%98%E6%80%BB%E7%BB%93/8f6e63a2fa13494a81e0f65c2ccf1c9d.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;实现-4&#34;&gt;实现&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prod(primes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这里的2是任取的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, P, n) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcd(pp, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; int(p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;phi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inverse_mod(e, phi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(c, d, n)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法二：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from gmpy2 import *
a = 2
n = 2
while True:
    a = pow(a, n, N)
    res = gcd(a-1, N)
    if res != 1 and res != N:
        q = N // res
        print(&amp;#34;p=&amp;#34;,res)
        print(&amp;#34;q=&amp;#34;,q)
        break
    n += 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;8p1光滑数分解&#34;&gt;8、$p+1$光滑数分解&lt;/h2&gt;
&lt;h2 id=&#34;9dp泄露&#34;&gt;9、$dp$泄露&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;实现-5&#34;&gt;实现&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gmpy2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; libnum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65537&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, e &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (((dp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((dp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (((dp &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        phi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gmpy2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;invert(e, phi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(pow(c, d, n))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(libnum&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;n2s(m))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10common-prime-rsa&#34;&gt;10、Common Prime RSA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wiener 提出，如果 $p$ 和 $q$ 是素数，使得 $p-1$ 和 $q-1$ 有一个大数因子，那么具有这种性质的素数可以作为 Wiener Attack 的反制措施。&lt;/p&gt;
&lt;p&gt;根据这种理论，出现了一种 $p-1$ 和 $q-1$ 拥有一个共同的大素数因子的 RSA 变体，我们称作共素数RSA（Common Prime RSA）。&lt;/p&gt;
&lt;p&gt;对于某个大素数 $g$，让 $p=2ga+1$ 且 $q=2gb+1$ 作为平衡素数，保证 $a,b$ 互素且 $h=2gab+a+b$ 是素数。第一个限制确保 $\gcd(p-1,q-1)=2g$，第二个限制确保 $(pq-1)/2=gh$ 与 $N=pq$ 的大小接近。&lt;/p&gt;
&lt;p&gt;因为由上述算法生成的素数 $p,q$ 满足 $g=\gcd(p-1,q-1)$ 是一个大素数因子，故称 $p,q$ 为共素数（common primes）。其中 $g$ 为这两个素数的共因子（common factor）。&lt;/p&gt;
&lt;p&gt;我们需要注意到对于共素数RSA有着以下性质：
$$
\lambda(pq)=\mathrm{lcm}(p-1,q-1)=\mathrm{lcm}(2ga,2gb)=2gab\
\varphi(pq)=(p-1)(q-1)=2ga2gb=2g\lambda(pq)
$$
此外存在额外定义，RSA加密指数和解密指数需要与 $\lambda(pq)$ 互素。&lt;/p&gt;
&lt;p&gt;根据上述定义，可以推导出
$$
N=pq=(2ga+1)(2gb+1)=2g(2gab+a+b)+1=2gh+1
$$
即 $N-1$ 为
$$
N-1=2g(2gab+a+b)=2gh
$$
定义 $\gamma$ 表示共因子 $g$ 的相对于 $N$ 的大小，即 $g=N^\gamma$。考虑 $g\leq N^{1/2}$，故 $0\leq\gamma\leq1/2$。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;生成算法&#34;&gt;生成算法&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NameError&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_prime&lt;/span&gt;(nbits: int, gamma: float):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getPrime(int(nbits &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; gamma))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; gamma
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRandomNBitInteger(int(alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nbits))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isPrime(p):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRandomNBitInteger(int(alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nbits))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; isPrime(q) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; isPrime(h) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; gcd(a, b) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRandomNBitInteger(int(alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; nbits))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p, q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(gen_prime(&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.48&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;攻击&#34;&gt;攻击&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;gamma-接近于-12&#34;&gt;$\gamma$ 接近于 $1/2$&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 $\gamma$ 接近于 $1/2$ 时，$g=N^\gamma$ 接近于 $N^{1/2}$，由于共素数RSA的特殊构造我们可以在 $O(N^{1/4-\gamma/2})$ 分解 $N$，故此时算法时间复杂度接近于 $O(1)$。&lt;/p&gt;
&lt;p&gt;此时我们只需修改 &lt;code&gt;Pollard&#39;s rho method&lt;/code&gt; 的 $x_i$ 函数。&lt;/p&gt;
&lt;p&gt;在 Mckee&amp;amp;Pinch 的论文&lt;a href=&#34;https://citeseerx.ist.psu.edu/doc_view/pid/64294c404088b69a519614510b8d12b4809a6b10&#34;&gt;《Further Attacks on Server-Aided RSA Cryptosystems》&lt;/a&gt;中指出将 $f(x)=x^2+1$ 修改为 $f(x)=x^{N-1}+3\pmod{N}$ 是最优解。&lt;/p&gt;
&lt;p&gt;由于 $N-1=2gh$ 且 $p-1=2ga$，故最多只有一个值不在 $x^{N-1}\mod{p}$ 的环中。&lt;/p&gt;
&lt;p&gt;算法实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NameError&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; math &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rho&lt;/span&gt;(N):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: (pow(x, N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; N
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 加快入环速度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, N)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(t)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        step_times &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        step_limit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; step_times &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; step_limit:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                step_times &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                step_limit &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(h)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcd(abs(int(t) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(h)), N)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (p, N &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f(h)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                step_times &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(rho(&lt;span style=&#34;color:#ae81ff&#34;&gt;84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;故事实证明 $\gamma$ 值的选取不能过于接近 $1/2$。&lt;/p&gt;
&lt;h4 id=&#34;已知-ab&#34;&gt;已知 $a,b$&lt;/h4&gt;
&lt;p&gt;已知 $N=2g(2gab+a+b)+1$，于是我们构造方程
$$
4abg^2+2(a+b)g-N+1=0
$$
可以在多项式时间 $\log(N)$ 内分解 $N$。&lt;/p&gt;
&lt;p&gt;Sagemath 代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1185431345934512&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1989628969125971&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54692260436051338814890781701826055707958209029414126894070449935683071253184867947357262267840171428710181955973010913204514025135188192484651672240708141692701667242130748316666406528479191422804307020656050201187035928715833163999813216597718706449260040885862566373392398826670863398295350419792842640631&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;.&amp;lt;&lt;/span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ZZ[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roots()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; g:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python 可以借助 &lt;code&gt;sympy&lt;/code&gt; 解方程。&lt;/p&gt;
&lt;h4 id=&#34;已知-g&#34;&gt;已知 $g$&lt;/h4&gt;
&lt;p&gt;当 $g\geq a+b$ 时，会导致在多项式时间为 $\log(N)$ 内分解 $N$，同时因为素数是平衡的，条件相当于 $g&amp;gt;N^{1/4}$。&lt;/p&gt;
&lt;p&gt;证明如下：&lt;/p&gt;
&lt;p&gt;我们假设 $g&amp;gt;a+b$，那么给予 $N,g$，令 $M=(N-1)/(2g)$，$c=a+b$，那么方程
$$
N=2g(2gab+a+b)+1
$$
可以改写成
$$
M=2gab+c
$$
因为 $c=a+b&amp;lt;g$，根据假设，可以归约为模 $g$ 域下的方程：
$$
c=M\pmod{g}
$$
因此，$c=a+b$ 是已知的。&lt;/p&gt;
&lt;p&gt;将 $b=c-a$ 带回方程 $N=2g(2gab+a+b)+1$，整理可得二次方程：
$$
2ga^2-2gca+(N-1)/(2g)-c=0
$$
可以解得 $a,b$ 为该方程两解。&lt;/p&gt;
&lt;p&gt;假设 $g=a+b$，我们将方程 $N=2g(2gab+a+b)+1$ 作等价替换，整理得到方程
$$
\frac{N-1}{4g^2}=ab+\frac{1}{2}
$$
我们再进一步替换 $b=g-a$，再次整理可得二次方程：
$$
a^2-ga+\frac{N-1}{4g^2}-\frac{1}{2}=0
$$
可以解得 $a,b$。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;$g&amp;gt;a+b$ 时，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2056971706333850947354991471886113601423457483931388832864204860321308350537317091564919029078296379733989138742162694786565228112885684303&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67324909911911622626246005558967775211455024820506932698435813321567574468019013664789401988015894964099052816176029553245881317276340043887466584645914352982274378611180595397686920214079479901514703963131435008906250160656759300390805929849374653321934393399433471228218819498373221757779799476717494079667&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; g
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;.&amp;lt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ZZ[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roots()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$g=a+b$ 时，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2855372645569408464444580237486670388029956719716115953907612135874419892154982850222965560661211729647325085879529571229774148545656169021&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;159549169988238873893531105042878385551537587717347282632324748268846735710748763722602882823022008548774298858161130258369850715542192739582830583643642436399008902770027668038725347353393047833875066622910131525247842517372845617227325882916166114361718015983671803859502931814932543107911548450229250776542101141849788751722460468073974316977656001286989710480324512919121409123619799426221232443036698458643438020098037548757403&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;.&amp;lt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ZZ[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roots()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 $p=2ga+1$，注意到 $g&amp;gt;N^{1/4}$ 是已知的，故我们也可以用 &lt;code&gt;Coppersmith&#39;s factoring&lt;/code&gt; 方法分解模数。&lt;/p&gt;
&lt;p&gt;而当 $g&amp;lt;a+b$ 时，我们可以使用时间复杂度为 $O(N^{1/4-\gamma})$ 的算法分解 $N$，每个操作的多项式时间为 $\log(N)$。&lt;/p&gt;
&lt;p&gt;证明如下：&lt;/p&gt;
&lt;p&gt;已知 $g$，我们可以通过除法算法计算 $u$ 和 $0\leq v\leq2g$，例如：
$$
\frac{N-1}{2g}=2gu+v
$$
因为我们知道 $N=2g(2gab+a+b)+1$，于是乎
$$
a+b=v+2gc\
ab=u-c
$$
其中 $c$ 为任意整数。&lt;/p&gt;
&lt;p&gt;对于任意与 $N$ 互素的整数 $x$，我们有
$$
x^{u2g}\equiv x^{ab2g+c2g}\equiv x^{c2g}\pmod{N}
$$
因为 $u=ab+c$ 且 $\lambda(N)=2gab$，所以 $x^{2gab}\equiv 1\pmod{N}$。&lt;/p&gt;
&lt;p&gt;让 $y=x^{2g}$，我们有
$$
y^u\equiv y^c\pmod{N}
$$
根据这个关系，未知的 $c$ 可以用 Shanks 的小步大步法（baby-step giant-step methodology）求解。对于某些 $d&amp;gt;\sqrt{c}$，我们计算得到大步为
$$
y^0,y^d,y^{2d},\cdots,y^{d^2}\mod{N}
$$
小步为
$$
y^u,y^{u-1},y^{u-2},\cdots,y^{u-d}\mod{N}
$$
在其中搜索碰撞，将会产生一个 $r$ 和 $s$ 满足：
$$
y^{rd}\equiv y^{u-s}\pmod{N}
$$
其中 $c=rd+s$。&lt;/p&gt;
&lt;p&gt;当 $c$ 已知，我们可以计算 $a,b$。&lt;/p&gt;
&lt;p&gt;计算，排序和搜索需要 $O(d\log(d))$ 操作，其中 $d&amp;gt;\sqrt{c}$。&lt;/p&gt;
&lt;p&gt;故使用这种算法需求 $\gamma$ 接近于 $1/4$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人多次跑这个算法，最终验证可得 $c$ 的大致范围大概率会落在 $N^{(1/2-2\gamma)}$ 的附近，取上下浮动两位大小最佳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sagemath 如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sage.groups.generic &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bsgs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28838314918840273611038952856252141148393903858815521699377328440901497&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23895816238623712091906549349650291003358466897973970818205381234024572750472476312894286233088847723906345049342176974080465940396626170377635736786780099297743807402105462746828310247313063710700453371777283064626446124365885063073122303271609231832129823571694756234973129694217982548355078107610764879363&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nbits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gamma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cbits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ceil(nbits &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; gamma))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;u &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; u
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Zmod(N)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random_element()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# c的范围大概与N^(0.5-2*gamma)很接近&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bsgs(y, y &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; u, (int(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(cbits&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)), int(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;(cbits&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ab &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;P&lt;span style=&#34;color:#f92672&#34;&gt;.&amp;lt;&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ZZ[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; apb &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;roots()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;分解-n-1&#34;&gt;分解 $N-1$&lt;/h4&gt;
&lt;p&gt;当 $\gamma$ 过小，即 $g=N^\gamma$ 过小时，因为已知 $N-1=2gh$，故分解出 $g$ 是较为容易的。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;yafu&lt;/code&gt; 分解 $\frac{N-1}{2}$，其中当 $\gamma$ 值约为 0.10 左右时分解迅速。&lt;/p&gt;
&lt;h2 id=&#34;11coppersmith定理攻击&#34;&gt;11、coppersmith定理攻击&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;基本原理&#34;&gt;基本原理&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12e和phi不互素&#34;&gt;12、e和phi不互素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;gcdeφn--1&#34;&gt;gcd(e,φ(n)) ≠ 1&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RSA学习笔记（1）</title>
      <link>https://p1um3r.github.io/blog/rsa%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 18 Apr 2023 08:00:00 +0800</pubDate>
      
      <guid>https://p1um3r.github.io/blog/rsa%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <description>&lt;h1 id=&#34;rsa学习笔记1&#34;&gt;RSA学习笔记（1）&lt;/h1&gt;
&lt;p&gt;（参考：cryptanalysis of RSA and its variants)&lt;/p&gt;
&lt;h2 id=&#34;一rsa算法系统&#34;&gt;一、RSA算法系统&lt;/h2&gt;
&lt;h3 id=&#34;11-公钥密码学&#34;&gt;1.1 公钥密码学&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公钥密码学的概念最早是在20世纪70年代中期由Diffie、Hellman和Merkle提出的。基于Stinson对于密码学的定义，我们对公钥密码系统使用了以下几个定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、$\mathcal{P}$是有限个可能的明文的集合&lt;/p&gt;
&lt;p&gt;2、$\mathcal{C}$ 是有限个可能的密文的集合&lt;/p&gt;
&lt;p&gt;3、$\mathcal{K}$ 是有限个可能的密钥的集合，$\mathcal{K}$  被称作密钥空间&lt;/p&gt;
&lt;p&gt;4、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于密钥空间中的任意一个密钥$K\in \mathcal{K}$，总存在一个加密方法
$$
enc_K：\mathcal{P} \to \mathcal{C}
$$
和一个解密方法
$$
dec_K:\mathcal{C}\to\mathcal{P}
$$
使得对于每个$m\in\mathcal{P}$，总有
$$
dec_K(enc_K(m))=m
$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5、对于任意密钥$K\in\mathcal{K}$ 和明文$m\in \mathcal{P}$，都很容易计算出$enc_K(m)$ 和$dec_K(enc_K(m))$&lt;/p&gt;
&lt;p&gt;6、对于几乎所有的密钥$K\in \mathcal{K}$，每一个易于计算的$dec_K$，都几乎不可能从$enc_K$中得出，也就是说，如果没有$dec_K$就很难进行解密。&lt;/p&gt;
&lt;p&gt;7、加密规则$enc_K$是公有的，解密规则$dec_K$是保密的。&lt;/p&gt;
&lt;p&gt;或者，我们可以把公钥密码学分为三个部分：&lt;strong&gt;密钥生成算法&lt;/strong&gt;、&lt;strong&gt;加密算法&lt;/strong&gt;和&lt;strong&gt;解密算法&lt;/strong&gt;。其中，我们用密钥生成算法定义密钥空间$\mathcal{K}$，用加密算法和解密算法定义明文空间 $\mathcal{P}$ 和密文空间 $\mathcal{C}$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://assets.cdn.prod.twilio.com/original_images/19DfiKodi3T25Xz7g9EDTyvF9di2SzvJo6JebRJaCN-1P_c1fMqGtrAyZzxGGucG0bcmR8UwNes-gS&#34; alt=&#34;What is Public Key Cryptography?&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-rsa密码系统&#34;&gt;1.2 RSA密码系统&lt;/h3&gt;
&lt;h4 id=&#34;121-rsa密码系统的结构&#34;&gt;1.2.1 RSA密码系统的结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSA密码系统是已知的公开的第一个公钥密码系统。&lt;/p&gt;
&lt;p&gt;1977年，Gardner在《科学美国人》的一篇文章中介绍了这个密码系统，一年后，RSA密码系统的发明者罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）共同发布了完整的研究论文。RSA就是他们三人姓氏开头字母拼在一起组成的。&lt;/p&gt;
&lt;p&gt;由于作者们都在麻省理工工作，这个密码系统最初被称作MIT公钥密码系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy93QWtBSUZzMTFxYXhTbkpBZ3FpY2ppYXZTMU5BNll0ZndWYk9pY3ZwMW9iM1hvbERFVm9YQ2xNNEFZRTh2MlprSWljUjgxNkd5OWdTVFByT1VGOTZxY0tpY0VnLzY0MA?x-oss-process=image/format,png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据上述对公钥密码系统的定义，我们可以给出RSA最初的的版本，也叫做textbook RSA&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RSA密码系统&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1、令$N=pq$，其中，$p$和$q$为两个大素数&lt;/p&gt;
&lt;p&gt;2、令$\mathcal{P}=\mathcal{C}=\mathbb{Z}_N$(模N后的整数)&lt;/p&gt;
&lt;p&gt;3、将密钥空间定义为
$$
\mathcal{K}={(N,p,q,e,d):ed\equiv1(\mod\phi(N))}
$$
其中$\phi(N)$是欧拉函数，$\phi(N)=(p-1)(q-1)$&lt;/p&gt;
&lt;p&gt;4、对于每个密钥$K\in \mathcal{K}$，因为$K=(N,p,q,e,d)$，加密方法$enc_K:\mathbb{Z}_N\to{\mathbb{Z}_N}$可以定义为
$$
enc_K(x)=x^e\mod(N)
$$
5、解密方法$dec_K:\mathbb{Z}_N\to\mathbb{Z}_N$可以定义为
$$
dec_K(y)=y^d\mod N
$$
6、对于任意$x,y\in\mathbb{Z}_N$，数对$(e,N)$是RSA的公钥，三元元组$(d,p,q)$是RSA的私钥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/c073bf987d384bd3b8ed67521c8238e6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Luj56CB5pS55Y-Y5LiW55WMY3R3,size_20,color_FFFFFF,t_70,g_se,x_16&#34; alt=&#34;05-密码学基础-RSA的介绍_密码学rsa_代码改变世界ctw的博客-CSDN博客&#34;&gt;&lt;/p&gt;
&lt;p&gt;加密函数$enc_K(x)=x^e\mod(N)$，其中N我们不知道该如何分解，并且$gcd(e,\phi(N))=1$，此时这个加密函数叫做&lt;strong&gt;RSA函数&lt;/strong&gt;，又叫做&lt;strong&gt;RSA原语(RSA primitive)&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$N$被称为&lt;strong&gt;RSA模数&lt;/strong&gt;，或简称&lt;strong&gt;模&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;素数$p$和$q$被称作&lt;strong&gt;RSA素数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;$e$被称作&lt;strong&gt;公共指数&lt;/strong&gt;或&lt;strong&gt;加密指数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;$d$被称作&lt;strong&gt;私有指数&lt;/strong&gt;或&lt;strong&gt;解密指数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中加密指数和解密指数必须满足以下条件：
$$
ed=1\mod(\phi(N))
$$
即
$$
ed=1+k\phi(N)
$$
其中k为整数。&lt;/p&gt;
&lt;p&gt;这个方程被称为&lt;strong&gt;RSA密钥方程&lt;/strong&gt;，简称&lt;strong&gt;密钥方程&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;122-rsa密码加解密的原理&#34;&gt;1.2.2 RSA密码加解密的原理&lt;/h4&gt;
&lt;p&gt;当明文与模数互素时，解密的正确性是基于欧拉函数。&lt;/p&gt;
&lt;p&gt;我们回顾一下这个定理
$$
a^{\phi(N)}\equiv 1(\bmod N)
$$
其中$a$和$N$互素。&lt;/p&gt;
&lt;p&gt;根据公钥$(e,N)$和明文$m\in\mathbb{Z}_N^*$($i.e.,m\in \mathbb{Z}_N$ and$gcd(m,N)=1)$，可以利用加密方法计算出密文
$$
c=m^e\mod N
$$
根据解密算法和RSA密钥方程，可以计算出明文。&lt;/p&gt;
&lt;p&gt;$$
\begin{equation} \label{eq1}
\begin{split}
c^d\mod N &amp;amp;\equiv(m^e)^d (\bmod N)\
&amp;amp;\equiv m^{ed}(\bmod N)\
&amp;amp;\equiv m^{1+k\phi(N)}(\bmod N)\
&amp;amp;\equiv m(m^{\phi(N)})^k(\bmod N)\
&amp;amp;\equiv m (\bmod N)
\end{split}
\end{equation}
$$
由于$m\in\mathbb{Z}_N$且$c^d\bmod N=m$，当明文与模互素时，我们可以用中国剩余定理很轻易地证得解密方法的正确性。我们要避免明文与模不互素的情况$(i.e.,gcd(m,N)&amp;gt;1)$，因为密文$c=m^e\bmod N$会泄露模数的分解方法，例如，通过计算$gcd(c,N)$可以得到RSA中其中一个素数p或q的值&lt;/p&gt;
&lt;p&gt;在PSA中，我们一开始就将公共指数和私密指数定义为模$\phi(N)$下互逆的两个数，这为将密文解密得到明文提供了足够的（但不一定必要的）前提条件。必要条件是公共指数和私密指数在模&lt;strong&gt;卡米歇尔函数（Carmichael&amp;rsquo;s lambda function)&lt;/strong&gt;$\lambda(N)$的条件下互逆。也就是说，对任意$a$与$N$互质时，存在最小m使得以下式子成立：
$$
a^m\equiv1(\bmod N)
$$
在RSA中，对于模数$N=pq$卡米歇尔函数的值为$\lambda(N)=lcm(p-1,q-1)$。&lt;/p&gt;
&lt;p&gt;根据推导：
$$
\begin{equation}
\begin{split}
\phi(N)&amp;amp;=(p-1)(q-1)\
&amp;amp;=\gcd(p-1,q-1)lcm(p-1,q-1)\
&amp;amp;=\gcd(p-1,q-1)\lambda(N)\
\end{split}
\end{equation}
$$
$\phi(N)$是$\lambda(N)$的倍数。&lt;/p&gt;
&lt;p&gt;这意味着我们在生成密钥时可以使用$\phi(N)$&lt;/p&gt;
&lt;p&gt;在这个过程中，我们可以联想到实际中RSA的公共指数和加密指数有时候定义为模$\lambda(N)$的逆，有时候定义为模$\phi(N)$的逆。&lt;/p&gt;
&lt;p&gt;另外，我们在RSA的例子中只考虑&lt;strong&gt;平衡素数&lt;/strong&gt;的情况，即RSA中的两个素数位数几乎相等。&lt;/p&gt;
&lt;p&gt;对于RSA中$N=pq$，我们可以得到：
$$
4&amp;lt;\frac{1}{2}N^{\frac{1}{2}}&amp;lt;p&amp;lt;N^{\frac{1}{2}}&amp;lt;q&amp;lt;2N^{\frac{1}{2}}
$$
相应的，在RSA的素数平衡时，满足$p&amp;lt;q&amp;lt;2p$
$$
\begin{equation}
\begin{split}
\abs{N-\phi(N)} &amp;amp;=\abs{N-(p-1)(q-1)}\
&amp;amp;=\abs{N-(N-p-q-1)}\
&amp;amp;=\abs{p+q-1}\
&amp;amp;&amp;lt;3N^{\frac{1}{2}}
\end{split}
\end{equation}
$$
因此，模数$N$和欧拉函数$\phi(N)$有几乎$\frac{1}{2}$的重要位数是相同的，结果导致$\phi(N)&amp;lt;N&amp;lt;2\phi(N)$。由于我们在计算中经常用到$N-\phi(N)$这个数值，所以我们用$s$来代替它，也就是说，可以得到：
$$
s=N-\phi(N)=p+q-1&amp;lt;3N^{\frac{1}{2}}
$$&lt;/p&gt;
&lt;p&gt;通过使用不正式的算法来描述公钥密码系统，我们可以定义我们在这个过程中使用的RSA加密算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;密钥生成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于一个参数n，密钥生成算法包括随机生成两个平衡素数$p$和$q$，他们的乘积$N=pq$即为一个n位的模数。&lt;/li&gt;
&lt;li&gt;选择一个公共加密指数$e$，使得它与$p-1$和$q-1$都互素，然后计算公共加密指数模$\lambda(N)$(或模$\phi(N)$)下的逆作为私密指数d。&lt;/li&gt;
&lt;li&gt;最终这个算法输出了公钥$(e,N)$和私钥$(d,p,q)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个算法可以选择使用更多的参数来确定公共指数和私密指数的大小。在这种情况下，一旦找到了对应的素数，有特定大小的指数可以随机选取，另一个指数可以通过求模$\lambda(N)$($\phi(N)$)下的逆得到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密算法需要输入公钥$(e,N)$和一个明文$m\in\mathbb{Z}_N$&lt;/li&gt;
&lt;li&gt;然后输出密文$c=m^e\bmod N$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解密&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解密算法需要输入私钥$(d,p,q)$和一个密文$c\in\mathbb{Z}_N$&lt;/li&gt;
&lt;li&gt;因为对于一些$m\in\mathbb{Z}_N$来说，$c=m^e$，所以输出明文$m=c^d\bmod N$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;密钥生成算法可以轻松地修改，来使它可以满足一些特定的公共指数的需求。当一个公共指数是定值时，例如$e=2^{16}+1$，那么这个随机选取的素数应该满足$\gcd(e,lcm(p-1,q-1))=1$，另一个指数可以通过求模$\lambda(N)$($\phi(N)$)下的逆得到。&lt;/p&gt;
&lt;p&gt;==必须强调的是，我们正在讨论的这个版本的RSA事实上和现实中使用的RSA是不一样的。当RSA被应用时，需要遵守的一个标准是PKCS，同时还会使用随机填充方案。这对于防止攻击和构建一个理论上安全的RSA非常重要==&lt;/p&gt;
&lt;h3 id=&#34;13-rsa的安全性&#34;&gt;1.3 RSA的安全性&lt;/h3&gt;
&lt;p&gt;RSA的安全性取决于解决那些所谓的RSA的问题的难度。&lt;/p&gt;
&lt;p&gt;RSA问题就是提供RSA的公钥$(e,N)$和一个密文$c=m^e\bmod N$，计算出明文$m$。也就是说，计算模$N$的$e$次方根，或者是倒解RSA方程。由于RSA的问题事实上是一个开放性的问题，我们的判断一般都依赖于RSA的一些假设，特别的，我们提出了&lt;strong&gt;RSA假设&lt;/strong&gt;，在这个假设中，要想让RSA问题难以被解决，我们需要使明文$m\in\mathbb{Z}_N$是随机选取的，同时模数是由随机生成的素数构成的足够大的数字。&lt;/p&gt;
&lt;p&gt;自RSA诞生以来，还没有明确的证据证明这个假设是错误的。如果你想知道更多相关的信息，可以去看看&lt;strong&gt;Rivest and Kaliski&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;131-整数因子分解&#34;&gt;1.3.1 整数因子分解&lt;/h4&gt;
&lt;p&gt;另一个经常与RSA的安全性相关联的问题就是著名的整数因子分解问题。简单来说，就是找到给定整数的&lt;strong&gt;非平凡因子&lt;/strong&gt;（除1和自身之外的因子）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要注意的是，如果RSA的模数可以被分解，那么对于任何有效的公共指数e，都可以轻易地计算出私密指数d，因此，我们可以破解出加密所需使用的所有公钥$(e,N)$。也就是说，我们可以轻易的解决RSA中关于用公钥加密的问题，并获得任意可用的明文。因此，解决了整数因子分解的问题后，RSA的问题就不难解决了。&lt;/li&gt;
&lt;li&gt;但是，我们并不知道反过来是不是正确的，也就是说，我们不知道解决RSA的问题能不能有效的帮助解决整数因子分解的问题。有一些证据表明，对于一些特定的公共指数来说，解决RSA问题比解决分解的问题更加容易。但这并不能起到决定性的证明作用。&lt;/li&gt;
&lt;li&gt;这个问题现在正在被Boneh、Venkatesa、Brown、Joux、Naccache、Thome、Aggarwal和Maurer等人研究。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管RSA的问题被认为比分解的问题更容易解决，在实际中我们假设它们是等同的。RSA的安全级别基于估计下的分解模数的难度。例如，我们可以使用最著名的通用分解算法——&lt;strong&gt;普通数域筛选法（GNFS）&lt;/strong&gt;，这是已知效率最高的分解整数的算法。在这个算法中，我们预计可以通过大约$2^{80}$次操作来分解一个1024位的数字。因此，我们可以认为一个1024位的RSA的安全性和一个80位的一次性密码本（一次一密）的安全性是一样的。目前，我们推荐在非关键加密中使用1024位的模。&lt;/p&gt;
&lt;h4 id=&#34;132-破解rsa&#34;&gt;1.3.2 破解RSA&lt;/h4&gt;
&lt;p&gt;由于整数分解的问题与RSA问题霞凝管，所以我们可以通过分解模数来&lt;strong&gt;破解RSA&lt;/strong&gt;。破解密码系统中有几个概念，同时，这种破解方式和完全破解的概念相符合。如果我们可以分解$N=pq$，我们就可以计算出关于任何公钥$(e,N)$的私钥$(d,p,q)$。因此，我们可以解决任何带有公钥和模数的RSA问题。在第三章和第四章的一些攻击方式只能做到部分破解，也就是说，这种破解方式只能恢复给定的密文中的部分明文，同时，他们也无法做到分解模数。不过，一般来说我们攻击的目的是为了分解给定实例中的RSA的模数&lt;/p&gt;
&lt;p&gt;分解RSA的模数的方法有好几种，其中最显而易见的方法是用一个已知的分解方法去分解这个模数。其他的方法包括计算私密指数$d$或者计算出欧拉函数$\phi(N)$，因为计算这些和分解RSA的模实际上是一样的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们去思考欧拉的$\phi$函数$\phi(N)=(p-1)(q-1)$，当对于RSA的模数N来说$\phi(N)$是已知的时，我们可以通过计算下面的方程来有效的分解模数：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\begin{equation}
\begin{split}
N &amp;amp;=pq\
\phi(N) &amp;amp;=(p-1)(q-1)\
\end{split}
\end{equation}
$$&lt;/p&gt;
&lt;p&gt;​		我们也容易发现$p$和$q$其实就是下面的方程的两个解：&lt;/p&gt;
&lt;p&gt;$$
x^2-(N-\phi(N)+1)x+N=0
$$
​		因此，只要给定了$\phi(N)$，我们就可以有效的分解模数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当已知$\lambda(N)$时，我们同样可以分解模数。根据Simmons，我们可以知道$\gcd(p-1,q-1)$是唯一一个满足下面的式子的数字：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\frac{N}{\lambda(N)}-2 &amp;lt;\gcd(p-1)(q-1)&amp;lt;\frac{N}{\lambda(N)}
$$&lt;/p&gt;
&lt;p&gt;​		因此，当我们得到$\lambda(N)$和$\gcd(p-1,q-1)$时，我们可以简单的计算出：
$$
\phi(N)=\gcd(p-1,q-1)\lambda(p-1,q-1)
$$
​		然后我们继续用上面提到的方法来分解模数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;另一个更加常用的分解模数的方法是：对于一些奇整数$N$，$N=p_1^{v_1}\cdot\cdot\cdot p_r^{v_r}$是他的素数分解方法。我们应当考虑以下三个公式：
$$
\begin{equation}
\begin{split}
\phi(N) &amp;amp;=p_1^{v_1-1}\cdot\cdot\cdot p_r^{v_r-1}(p_1-1)\cdot\cdot\cdot(p_r-1)\
\lambda(N)&amp;amp;=p_1^{v_1-1}\cdot\cdot\cdot p_r^{v_r-1}lcm(p_1-1,\cdot\cdot\cdot, p_r-1)\
\lambda&amp;rsquo;(N)&amp;amp;=lcm(p_1-1,\cdot\cdot\cdot, p_r-1)\
\end{split}
\end{equation}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其中$\phi(N)$是欧拉函数，$\lambda(N)$是卡米歇尔函数。我们使用&lt;strong&gt;米勒(Miller)&lt;strong&gt;得出的结论：当我们在多项式时间内可以分解N并且得到一组$\lambda&amp;rsquo;(N)$时，我们可以构建一个&lt;/strong&gt;Las Vegas 算法&lt;/strong&gt;。由于$\phi(N)$和$\lambda(N)$都是$\lambda&amp;rsquo;(N)$的倍数，也就是说只要我们被给定了上述任意一个方程式，我们就可以分解N。因此，知道很多组$\phi(N)$和$\lambda(N)$就能够分解RSA的模数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在我们考虑我们知道私钥的情况。根据密钥方程：
$$
ed=1+k\varphi(N)
$$
其中$\varphi(N)$等于$\phi(N)$或$\lambda(N)$（取决于公共和私密指数是如何定义的），当我们知道d时，我们就可以计算出
$$
ed-1=k\varphi(N)
$$
由于$\varphi(N)$是$\lambda&amp;rsquo;(N)$的倍数，我们可以使用米勒的结论来尝试分解模数。这样，拥有了私密指数，我们就有可能破解RSA&lt;/p&gt;
&lt;p&gt;由于公共指数和私密指数被定义为模$\phi(N)$下互逆，我们知道如果被告知了私密指数$d$，模数肯定会在指数时间内被分解（公共指数和私密指数满足条件$ed&amp;lt;N^2$）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;133-rsa的密码分析&#34;&gt;1.3.3 RSA的密码分析&lt;/h4&gt;
&lt;p&gt;RSA攻击有很多类型，例如，有很多种&lt;strong&gt;侧信道攻击&lt;/strong&gt;的方式，他们利用实现RSA的设备的一些物理性质来进行攻击。其中包括&lt;strong&gt;故障注入（fault injection attacks)&lt;/strong&gt;、&lt;strong&gt;计时攻击(timing attacks)&lt;/strong&gt;、&lt;strong&gt;功耗攻击(power analysis attacks)&lt;/strong&gt;、&lt;strong&gt;分支预测攻击(branch analysis attacks)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://cn-sec.com/wp-content/uploads/2022/01/8-1642150089.png&#34; alt=&#34;侧信道攻击与电子数据取证&#34;&gt;&lt;/p&gt;
&lt;p&gt;其他的攻击方式主要关注于密码安全性中的人为干预因素。&lt;strong&gt;社会工程攻击&lt;/strong&gt;可以用来预测一个人的行为。这种方法通过某些方式来获取用户的一些信息。例如，如果你在半夜疯狂的向一个人打电话并告诉他工作上有紧急情况，需要密码短语，你就有可能获取到用于确保RSA私钥的安全性的密码短语。在所谓的**软磨硬泡攻击(rubber-hose attacks)**中，您可以通过武力或者威胁来获取一些信息。&lt;/p&gt;
&lt;p&gt;我们所考虑的攻击方式是排除掉RSA被使用的物理环境的。这些攻击方式是基于RSA密码学的数学结构（模或者密钥方程的形式），并且利用一些特定参数的选择（例如使用较小的公共指数或者私密指数）。我们也会包括一些使用有关私钥的相关知识的攻击方式，但是并不关心这些信息是如何获得的。&lt;/p&gt;
&lt;h4 id=&#34;134-rsa的同态性质&#34;&gt;1.3.4 RSA的同态性质&lt;/h4&gt;
&lt;p&gt;RSA具有乘法的性质——两个明文信息乘积的加密等于两个明文信息加密的乘积（在模N的前提下），这个性质通常被称为&lt;strong&gt;RSA的同态性质&lt;/strong&gt;，并遵循模的乘法的基本性质。利用这个RSA的同态性质，Davida证明了教科书上的RSA面对&lt;strong&gt;选择密文攻击&lt;/strong&gt;是不安全的。如下是Judy Moore对攻击的简化：&lt;/p&gt;
&lt;p&gt;假设对方得到了一个密文$c=m^e \bmod N$并且想要计算出明文$m$，选择一个随机数$x \in \mathbb{Z}_N$，对方索要密文$c_0=cx^e$的明文。由于所需的明文$m_0$满足
$$
m_0=c_0^d \bmod N=(cx^e)^d \bmod N=c^dx^{ed}\bmod N=mx \bmod N
$$
那么对方（已知m0）可以通过简单的计算$m=m_0x^{-1} \bmod N$来获得目标明文。&lt;/p&gt;
&lt;p&gt;另一种使用了RSA的同态性质的攻击方式来自于Bonrh,Joux和Nguyen。他们利用过了这样一个事实：在实际中，RSA通常用于加密一些短信息（通常是用于对称密钥加密系统的一个会话密钥）。本质上，他们的攻击方式是一种&lt;strong&gt;中间相遇攻击(Meet-in-the-middle attack)&lt;/strong&gt;，其中$l$位的目标明文可以被分解为两个$\frac{l}{2}$位的因子$m_1$和$m_2$ $(i.e.,m=m_1m_2)$。首先，这种攻击方式需要共建一个表格，表格里有所有$\frac{l}{2}$位的数字$m_1&amp;rsquo;$和它们的加密结果$(m_1&amp;rsquo;)^e \bmod N$。然后，对于每个可能的$\frac{l}{2}$位的数字$m_2&amp;rsquo;$，计算$c(m_2&amp;rsquo;)^{-e}\bmod N$的值来和表格中的加密结果作比较，当$m_2&amp;rsquo;=m_2$时，满足
$$
c(m_2)^{-e}\bmod N=(m_1m_2)^e(m_2)^{-e}\bmod N=(m_1)^e\bmod N
$$
所以，当找到这种配对方式时，明文$m$的分解方式和他自身就被找到了。这种攻击方式需要计算$2^{\frac{l}{2}+1}$次模幂运算，需要在表格中储存$2^{\frac{l}{2}}l$对数字，并且成功的概率约为18%（超过明文m的选择）&lt;/p&gt;
&lt;p&gt;只要在明文中添加一些结构，这些攻击方式就可以很轻易地被避免，特别是使用适当的填充方案就足够了，例如OAEP。&lt;/p&gt;
&lt;h4 id=&#34;135-语义安全&#34;&gt;1.3.5 语义安全&lt;/h4&gt;
&lt;p&gt;我们回忆一下，一个语义安全的加密系统就是你没有办法从给定的密文（包括已知公钥）中得到任何有关明文的信息。&lt;/p&gt;
&lt;p&gt;我们上面定义的RSA加密系统显然不是一个语义安全的加密系统。尤其是，任何&lt;strong&gt;确定性的加密系统&lt;/strong&gt;都不能说是语义安全的。给定两个明文和其中一个的密文，任何攻击者都可以判断出密文对应的是哪段明文（通过简单的加密明文并进行比较）。因此，所有语义安全的加密系统都应该是&lt;strong&gt;概率性的系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，可以很容易发现，明文的雅克比符号（和模数）可以很轻易地通过密文的雅可比符号（和模数）泄露出来。特别的，我们可以发现对于任意明文$m$和它对应的密文$c$，满足
$$
(\frac{c}{N})=(\frac{m}{N})
$$
因此，仅仅知道密文和公钥，就泄露了一些明文的信息。&lt;/p&gt;
&lt;p&gt;但是，当RSA是通过OAEP实现的时，我们可以证明只要RSA的假设成立，它就是语义安全的。在公钥$e=3$时的情况已经被证实了。所有这些证明都是基于随机语言模型的。我们也可以用其他填充方式来确保RSA安全&lt;/p&gt;
&lt;h3 id=&#34;14-rsa的效率&#34;&gt;1.4 RSA的效率&lt;/h3&gt;
&lt;p&gt;我们简单的考虑一下RSA的效率。特别的，我们考虑素数生成和模幂运算所需要花费的时间，它们分别是密钥生成算法和加密解密算法中最重要的部分。&lt;/p&gt;
&lt;h4 id=&#34;141-素数的生成&#34;&gt;1.4.1 素数的生成&lt;/h4&gt;
&lt;p&gt;RSA中的密钥生成算法需要生成两个大小几乎相同的素数。我们使用Miller-Rabin质数检验和试除法，可以在预计运行时间为$O(\frac{n^4}{\log(n)}+tn^3)$的时间内，生成一个n位的随机（也许）素数。这种方法有最多$t^{-4}$的概率会输出一个复合数，而非素数。这个复杂方法被认为是简单二次运算，可以通过快速乘法来进行改进。但是即使是已知最快的方法，它的复杂度至少也有$O(n^2)$。对于一个大模数来说，这是一个很耗时的操作，尤其是如果需要生成大量素数的情况。&lt;/p&gt;
&lt;p&gt;有很多快速生成素数的方法，但是没有一个能在这方面有显著的突破。&lt;/p&gt;
&lt;h4 id=&#34;142-模幂运算未完&#34;&gt;1.4.2 模幂运算（未完）&lt;/h4&gt;
&lt;p&gt;RSA中的加密和解密都包含模幂运算，当加密指数和模数非常大时，这些操作可能会非常耗时。有一个$b$位的加密指数$B$和一个$n$位的模数$N$，对一些$X \in \mathbb{Z}_N$，有模幂运算
$$
X^B\bmod N
$$
有很多不同的模幂运算算法，但是本质上，这种计算的复杂度可以转化为计算模幂运算的数量。例如，&lt;/p&gt;
&lt;h3 id=&#34;15-rsa签名方案&#34;&gt;1.5 RSA签名方案&lt;/h3&gt;
&lt;p&gt;在RSA被提出时，RSA最初是用于&lt;strong&gt;构造加密方案&lt;/strong&gt;和&lt;strong&gt;数字签名方案&lt;/strong&gt;的。最初，解密操作可以用于为一个文件签名，加密操作可以用于验证签名。在本文中，我们只考虑RSA（及其变种）作为加密方案的情况&lt;/p&gt;
&lt;h3 id=&#34;16-rsa的变种具体见第三章&#34;&gt;1.6 RSA的变种（具体见第三章）&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;17-一些额外的笔记&#34;&gt;1.7 一些额外的笔记&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>常见密码和编码总结</title>
      <link>https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 13 Apr 2023 08:00:00 +0800</pubDate>
      
      <guid>https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;常见密码和编码总结&#34;&gt;常见密码和编码总结&lt;/h1&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;对常见的编码和密码做个归纳
并记录一些可用的网站和工具
可以当做手册使用&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=1%E3%80%81-,ASCII%E7%BC%96%E7%A0%81,-%E7%8E%B0%E4%BB%8A%E6%9C%80%E9%80%9A%E7%94%A8&#34;&gt;ASCII码&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=3%E3%80%81-,URL%E7%BC%96%E7%A0%81,-url%E7%BC%96%E7%A0%81%E5%8F%88&#34;&gt;URL编码&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=2%E3%80%81-,base64%2C32%E7%BC%96%E7%A0%81,-Base64%E6%98%AF%E7%BD%91%E7%BB%9C&#34;&gt;base家族编码&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=7%E3%80%81-,%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81%EF%BC%88%E6%91%A9%E6%96%AF%E5%AF%86%E7%A0%81%EF%BC%89,-%E5%A4%A7%E5%90%8D%E9%BC%8E%E9%BC%8E%E7%9A%84morse&#34;&gt;摩尔斯电码（Morse Code）&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;[ShellCode]&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=9%E3%80%81-,XXencode%E7%BC%96%E7%A0%81,-XXencode&#34;&gt;XXencode编码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=10%E3%80%81-,UUencode%E7%BC%96%E7%A0%81,-UUencode%E7%BC%96%E7%A0%81&#34;&gt;UUencode编码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=5%E3%80%81-,aaencode/%E9%A2%9C%E6%96%87%E5%AD%97,-aaencode%E7%9A%84%E8%A7%A3&#34;&gt;AAencode编码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%B8%80%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81:~:text=6%E3%80%81-,JSfuck,-JSFuck%20%E5%8F%AF%E4%BB%A5%E8%AE%A9&#34;&gt;JSfuck编码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=2%E3%80%81-,ppencode,-ppencode%2DPerl%E6%8A%8A&#34;&gt;PPencode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=3%E3%80%81-,rrencode,-rrencode%E5%8F%AF%E4%BB%A5%E6%8A%8A&#34;&gt;RRencode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;[asp混淆加密]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[php混淆加密]&lt;/td&gt;
&lt;td&gt;[css/js混淆加密]&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=1%E3%80%81-,VBScript.Encode%E8%A7%A3%E5%AF%86,-VBScript.Encode%E8%A7%A3&#34;&gt;VBScript.Encode混淆加密&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=8%E3%80%81-,Quoted%2Dprintable%E7%BC%96%E7%A0%81,-Quoted%2Dprintable%E7%BC%96%E7%A0%81&#34;&gt;Quoted-printable编码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=11%E3%80%81-,Escape/Unescape%E7%BC%96%E7%A0%81,-Escape/Unescape&#34;&gt;Escape/Unescape编码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=4%E3%80%81-,Unicode%E7%BC%96%E7%A0%81,-unicode%E7%BC%96%E7%A0%81&#34;&gt;Unicode编码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=7%E3%80%81-,jother,-jother%E6%98%AF%E4%B8%80%E7%A7%8D&#34;&gt;jother&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=8%E3%80%81-,brainfuck,-Brainfuck%E6%98%AF%E4%B8%80%E7%A7%8D&#34;&gt;Brainfuck&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=9%E3%80%81-,Ook!,-Ook!%20%E4%B8%8EBrainfuck&#34;&gt;Ook&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=10%E3%80%81-,Bubble%20Babble,-Bubble%20Babble&#34;&gt;Bubble Babble&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=1%E3%80%81-,%E4%B8%8E%E4%BD%9B%E8%AE%BA%E7%A6%85,-%E4%B8%8E%E4%BD%9B%E8%AE%BA&#34;&gt;与佛论禅&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;[新与佛论禅]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;%E6%96%87%E6%9C%AC%E5%8A%A0%E5%AF%86&#34;&gt;文本加密&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=3%E3%80%81-,%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E8%A7%82%E5%AF%86%E7%A0%81,-%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC%E8%A7%82&#34;&gt;核心价值观密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%94%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%8A%A0%E5%AF%86:~:text=5%E3%80%81-,%E5%85%BD%E9%9F%B3%E8%AF%91%E8%80%85,-%E7%BB%99%E6%88%91%E7%AC%91%E6%AD%BB&#34;&gt;兽音译者&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;尊嘟假嘟语&lt;/td&gt;
&lt;td&gt;我的世界_地牢密码&lt;/td&gt;
&lt;td&gt;中文电码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;敲击码&lt;/td&gt;
&lt;td&gt;HTML实体编码&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=12%E3%80%81-,md5,-md5&#34;&gt;md5&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;栅栏密码&lt;/td&gt;
&lt;td&gt;简单换位密码&lt;/td&gt;
&lt;td&gt;列移位密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;曲路密码&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=1%E3%80%81-,%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81,-%E6%98%8E%E6%96%87%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89&#34;&gt;凯撒密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=2%E3%80%81-,ROT5/13/18/47,-ROT5%EF%BC%9A%E5%8F%AA%E5%AF%B9&#34;&gt;ROT5/13/18/47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=3%E3%80%81-,QWE%E5%8A%A0%E5%AF%86,-%E4%BB%8E%E7%94%B5%E8%84%91%E9%94%AE%E7%9B%98&#34;&gt;QWE加密&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=4%E3%80%81-,%E6%8B%BC%E9%9F%B3%E4%B9%9D%E9%94%AE%E5%8A%A0%E5%AF%86,-%E5%88%A9%E7%94%A8%E5%AD%97%E6%AF%8D%E5%9C%A8&#34;&gt;拼音九键加密&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=5%E3%80%81-,%E5%9F%83%E7%89%B9%E5%B7%B4%E4%BB%80%E7%A0%81,-%E4%BB%A5%E5%AD%97%E6%AF%8D%E5%80%92&#34;&gt;埃特巴什码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=6%E3%80%81-,%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A0%81,-%E6%AF%8F%E4%B8%AA%E6%98%8E%E6%96%87&#34;&gt;培根密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=7%E3%80%81-,%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81,-%E6%AF%8F%E4%B8%AA%E5%AD%97%E6%AF%8D&#34;&gt;希尔密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=8%E3%80%81-,%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81,-%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81&#34;&gt;猪圈密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=9%E3%80%81-,%E5%9C%A3%E5%A0%82%E6%AD%A6%E5%A3%AB%E5%AF%86%E7%A0%81,-%E4%B9%9F%E7%AE%97%E6%98%AF%E7%8C%AA&#34;&gt;圣堂武士密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=10%E3%80%81-,%E9%93%B6%E6%B2%B3%E5%AD%97%E6%AF%8D,-11%E3%80%81%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A&#34;&gt;银河字母&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=11%E3%80%81-,%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81,-%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81&#34;&gt;维吉尼亚密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=12%E3%80%81-,%E6%A0%BC%E7%BD%97%E6%96%AF%E8%B4%B9%E5%B0%94%E5%BE%B7%E5%AF%86%E7%A0%81,-%E6%A0%BC%E7%BD%97%E6%96%AF%E8%B4%B9&#34;&gt;格罗斯费尔德密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=13%E3%80%81-,%E8%87%AA%E5%8A%A8%E5%AF%86%E9%92%A5%E5%AF%86%E7%A0%81,-%E8%87%AA%E5%8A%A8%E5%AF%86%E9%92%A5&#34;&gt;自动密钥密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=14%E3%80%81-,%E5%8D%9A%E7%A6%8F%E7%89%B9%E5%AF%86%E7%A0%81,-%E5%8D%9A%E7%A6%8F%E7%89%B9%E5%AF%86%E7%A0%81&#34;&gt;博福特密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=15%E3%80%81-,%E6%BB%9A%E5%8A%A8%E5%AF%86%E9%92%A5%E5%AF%86%E7%A0%81,-%E6%BB%9A%E5%8A%A8%E5%AF%86%E9%92%A5&#34;&gt;滚动密钥密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=16%E3%80%81-,%E5%A4%8F%E5%A4%9A%E5%AF%86%E7%A0%81%EF%BC%88%E6%9B%B2%E6%8A%98%E5%8A%A0%E5%AF%86%EF%BC%89,-%E4%BD%9C%E8%80%85%E9%BA%A6%E5%85%8B%E6%96%AF&#34;&gt;夏多密码（曲折密码）&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=17%E3%80%81-,%E6%B3%A2%E5%88%A9%E6%AF%94%E5%A5%A5%E6%96%AF%E6%96%B9%E9%98%B5%E5%AF%86%E7%A0%81,-%E6%B3%A2%E5%88%A9%E6%AF%94&#34;&gt;波利比奥斯方阵密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=18%E3%80%81-,%E6%99%AE%E8%8E%B1%E8%8F%B2%E5%B0%94%E5%AF%86%E7%A0%81,-%E6%99%AE%E8%8E%B1%E8%8F%B2&#34;&gt;普莱菲尔密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=19%E3%80%81-,ADFGX%E5%AF%86%E7%A0%81,-ADFGX%E5%AF%86%E7%A0%81%28ADFGX&#34;&gt;ADFGX密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E5%9B%9B%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81:~:text=20%E3%80%81-,ADFGVX%E5%AF%86%E7%A0%81,-ADFGVX%E5%AF%86%E7%A0%81%E5%AE%9E%E9%99%85&#34;&gt;ADFGVX密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=21%E3%80%81-,%E5%8F%8C%E5%AF%86%E7%A0%81,-%E5%8F%8C%E5%AF%86%E7%A0%81%28Bifid&#34;&gt;双密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=22%E3%80%81-,%E4%B8%89%E5%88%86%E5%AF%86%E7%A0%81,-%E4%B8%89%E5%88%86%E5%AF%86%E7%A0%81%28Trifid&#34;&gt;三分密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=23%E3%80%81-,%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A0%81,-%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A0%81%28Four&#34;&gt;四方密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=24%E3%80%81-,%E6%A3%8B%E7%9B%98%E5%AF%86%E7%A0%81,-%E6%A3%8B%E7%9B%98%E5%AF%86%E7%A0%81%EF%BC%88Checkerboard&#34;&gt;棋盘密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=25%E3%80%81-,%E8%B7%A8%E6%A3%8B%E7%9B%98%E5%AF%86%E7%A0%81,-%E8%B7%A8%E6%A3%8B%E7%9B%98%E5%AF%86%E7%A0%81&#34;&gt;跨棋盘密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=26%E3%80%81-,%E4%BA%91%E5%BD%B1%E5%AF%86%E7%A0%81,-%E9%87%87%E7%94%A8%E7%9A%84%E6%98%AF0&#34;&gt;云影密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=27%E3%80%81-,Porta%E5%AF%86%E7%A0%81,-Porta%E5%AF%86%E7%A0%81%28Porta&#34;&gt;Porta密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E5%9B%9B%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81:~:text=28%E3%80%81-,%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81,-%E4%BB%BF%E5%B0%84%E5%AF%86%E7%A0%81&#34;&gt;仿射密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E5%9B%9B%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81:~:text=29%E3%80%81-,Bazeries%E5%AF%86%E7%A0%81,-Bazeries%E5%AF%86%E7%A0%81B%28azeries&#34;&gt;Bazezeries密码&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://p1um3r.github.io/blog/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/#%E4%BA%8C%E6%8D%A2%E4%BD%8D%E5%AF%86%E7%A0%81:~:text=30%E3%80%81-,%E5%BD%93%E9%93%BA%E5%AF%86%E7%A0%81,-%E5%BD%93%E9%93%BA%E5%AF%86%E7%A0%81&#34;&gt;当铺密码&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同音替换密码&lt;/td&gt;
&lt;td&gt;分组摩尔斯替换密码&lt;/td&gt;
&lt;td&gt;Digrafid密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;格朗普雷密码&lt;/td&gt;
&lt;td&gt;比尔密码&lt;/td&gt;
&lt;td&gt;恩尼格码密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lolcode&lt;/td&gt;
&lt;td&gt;Befunge&lt;/td&gt;
&lt;td&gt;Chef&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Piet&lt;/td&gt;
&lt;td&gt;Shakespeare&lt;/td&gt;
&lt;td&gt;Whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INTERCAL&lt;/td&gt;
&lt;td&gt;Malbolge&lt;/td&gt;
&lt;td&gt;BIT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZOMBIE&lt;/td&gt;
&lt;td&gt;HQ9+&lt;/td&gt;
&lt;td&gt;Rabbit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;幂数加密&lt;/td&gt;
&lt;td&gt;卡尔达诺栅格码（spammimic）&lt;/td&gt;
&lt;td&gt;百家姓暗号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一常见编码&#34;&gt;一、常见编码&lt;/h3&gt;
&lt;h4 id=&#34;1ascii编码&#34;&gt;1、ASCII编码&lt;/h4&gt;
&lt;p&gt;现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646&lt;/p&gt;
&lt;p&gt;可以分作三部分组成
第一部分是：ASCII非打印控制字符
第二部分是：ASCII打印字符；
第三部分是：扩展ASCII打印字符&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119192658523.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119192718216.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119192811181.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;转换网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ab126.com/goju/1711.html&#34;&gt;ASCII 在线转换器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/cencode.html&#34;&gt;ASCII编码转换&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2base6432编码&#34;&gt;2、base64,32编码&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Base64&lt;/strong&gt;是网络上最常见的用于传输8Bit字节码的编码方式之一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于64个可打印字符来表示二进制数据的方法&lt;/li&gt;
&lt;li&gt;3个字节可表示4个可打印字符&lt;/li&gt;
&lt;li&gt;如果要编码的字节数不能被3整除：当最后剩余一个八位字节（一个byte）时，最后6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119201223700.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;加密：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import base64
&amp;gt;&amp;gt;&amp;gt; encode = base64.b64encode(b&amp;#39;I love you&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; encode
b&amp;#39;SSBsb3ZlIHlvdQ==&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解密：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import base64
&amp;gt;&amp;gt;&amp;gt; decode = base64.b64decode(b&amp;#39;SSBsb3ZlIHlvdQ==&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; decode
b&amp;#39;I love you&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;base32&lt;/strong&gt;
只有大写字母（A-Z）和数字234567&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/2020111920155139.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;跟base64相似就是将base64.b 64encode变成base64.b 32encode
加密：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; encode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b32encode(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I love you&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; encode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JEQGY33WMUQHS33V&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解密：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; decode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b32decode(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JEQGY33WMUQHS33V&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; decode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I love you&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tool.chinaz.com/tools/base64.aspx&#34;&gt;Base64加密解密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/base64.html&#34;&gt;base编码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;3url编码&#34;&gt;3、URL编码&lt;/h4&gt;
&lt;p&gt;url编码又叫百分号编码，是统一资源定位(URL)编码方式
URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过在该字节ascii码的的16进制字符前面加%编码处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;js：有encodeURI、encodeURIComponent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHP有 urlencode、urldecode等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;url编码和双重编码是绕过时常用手段&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tool.chinaz.com/tools/urlencode.aspx&#34;&gt;UrlEncode编码/解码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/url.html&#34;&gt;URL编码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;4unicode编码&#34;&gt;4、Unicode编码&lt;/h4&gt;
&lt;p&gt;unicode编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是一种所有符号的编码，现在的规模可以容纳100多万个符号，https://home.unicode.org/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式，其他实现方式还包括 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示），不过在互联网上基本不用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UTF-8&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;于n字节的符号（n &amp;gt; 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119204245361.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;二者的转换方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先找到该Unicode编号所在的编号范围，进而可以找到与之对应的二进制格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后将该Unicode编号转化为二进制数（去掉高位的0）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后将该二进制数从右向左依次填入二进制格式的X中，如果还有X未填，则设为0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tool.chinaz.com/tools/unicode.aspx&#34;&gt;Unicode编码转换&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5html实体编码&#34;&gt;5、HTML实体编码&lt;/h4&gt;
&lt;p&gt;喜闻乐见的&lt;code&gt;&amp;amp;#&lt;/code&gt;
HTML 中的预留字符必须被替换为字符实体
一些在键盘上找不到的字符也可以使用字符实体来替换&lt;/p&gt;
&lt;p&gt;可参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3school.com.cn/html/html_entities.asp&#34;&gt;HTML 字符实体&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.runoob.com/tags/html-symbols.html&#34;&gt;HTML 符号实体参考手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3school.com.cn/tags/html_ref_entities.html&#34;&gt;HTML ISO-8859-1 参考手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.convertstring.com/zh_CN/EncodeDecode/HtmlEncode&#34;&gt;在线HTML编码器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/html_en.html&#34;&gt;HTML编码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;6敲击码&#34;&gt;6、敲击码&lt;/h4&gt;
&lt;p&gt;敲击码(Tap code)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种以非常简单的方式对文本信息进行编码的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因该编码对信息通过使用一系列的点击声音来编码而命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于5×5方格波利比奥斯方阵来实现的，不同点是用K字母被整合到C中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/2020111920511547.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119205121551.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/tapcode.html&#34;&gt;敲击码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;7摩尔斯电码摩斯密码&#34;&gt;7、摩尔斯电码（摩斯密码）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;大名鼎鼎的morse电码&lt;/li&gt;
&lt;li&gt;早期的数字化通信形式
不同于现代只使用0和1两种状态的二进制代码&lt;/li&gt;
&lt;li&gt;代码包括五种：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		- 点（.）&lt;/p&gt;
&lt;p&gt;​		- 划（-）&lt;/p&gt;
&lt;p&gt;​		- 每个字符间短的停顿（在点和划之间的停顿）&lt;/p&gt;
&lt;p&gt;​		- 每个词之间中等的停顿&lt;/p&gt;
&lt;p&gt;​		- 句子之间长的停顿&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119210224286.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.atool99.com/morse.php&#34;&gt;中文摩斯密码 Morse莫尔斯电码加密解密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.zou114.com/mesm/&#34;&gt;摩尔斯密码在线翻译&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/morse.html&#34;&gt;Morse code&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;8quoted-printable编码&#34;&gt;8、Quoted-printable编码&lt;/h4&gt;
&lt;p&gt;Quoted-printable编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多用途互联网邮件扩展（MIME) 一种实现方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;帮助非ASCII编码的信件传输通过SMTP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个末编码的二进制字符被编码成三个字符，即一个等号和一个十六进制的数字，如‘=AB’&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编码方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119210615584.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mxcz.net/tools/QuotedPrintable.aspx&#34;&gt;QuotedPrintable编码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/quoted.html&#34;&gt;Quoted-printable编码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;9xxencode编码&#34;&gt;9、XXencode编码&lt;/h4&gt;
&lt;p&gt;XXencode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将输入文本以每三个字节为单位进行编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果最后剩下的资料少于三个字节，不够的部份用0补齐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这三个字节共有24个Bit，以6bit为单位分为4个组，每个组以十进制来表示所出现的数值只会落在0到63之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以所对应值的位置字符代替。它所选择的可打印字符是：&lt;code&gt;+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&lt;/code&gt;，一共64个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跟base64打印字符相比，就是UUencode多一个&lt;code&gt;-&lt;/code&gt;字符，少一个&lt;code&gt;/&lt;/code&gt; 字符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://web.chacuo.net/charsetxxencode&#34;&gt;在线XXencode编码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/xxencode.html&#34;&gt;XXencode&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;10uuencode编码&#34;&gt;10、UUencode编码&lt;/h4&gt;
&lt;p&gt;UUencode编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;起先用在unix网络中，早期在电子邮件中使用较多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用0补齐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值，这个数值只会落在0到63之间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201120123238507.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://web.chacuo.net/charsetuuencode&#34;&gt;在线UUencode编码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/uu.html&#34;&gt;UUencode&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;11escapeunescape编码&#34;&gt;11、Escape/Unescape编码&lt;/h4&gt;
&lt;p&gt;Escape/Unescape&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;又叫%u编码，采用UTF-16BE模式，16进制表示方式前面加%u&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为目前%字符，常用作URL编码，所以%u这样编码已经逐渐被废弃了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://web.chacuo.net/charsetescape&#34;&gt;在线Escape编码/加密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/escape.html&#34;&gt;Escape编码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;12md5&#34;&gt;12、md5&lt;/h4&gt;
&lt;p&gt;md5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;值范围在&lt;code&gt;0-9&lt;/code&gt;，&lt;code&gt;a-f&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119213328102.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;md5碰撞&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import hashlib

for i in range(10000, 10000001):
    s = hashlib.md5(str(i).encode()).hexdigest()[0:5]
    if s == &amp;#34;5fe45&amp;#34;:
        print(i)
        break
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cmd5.com/&#34;&gt;CMD5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.xmd5.org/&#34;&gt;xmd5&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;二换位密码&#34;&gt;二、换位密码&lt;/h3&gt;
&lt;h4 id=&#34;1栅栏密码&#34;&gt;1、栅栏密码&lt;/h4&gt;
&lt;p&gt;把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话&lt;/p&gt;
&lt;p&gt;以2栏栅栏加密为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明文：THE LONGEST DAY MUST HAVE AN END&lt;/li&gt;
&lt;li&gt;把将要传递的信息中的字母交替排成上下两行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		T E O G S D Y U T A E N N&lt;/p&gt;
&lt;p&gt;​		H L N E T A M S H V A E D&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密文：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​		将下面一行字母排在上面一行的后边。&lt;/p&gt;
&lt;p&gt;​		TEOGSDYUTAENN HLNETAMSHVAED&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/&#34;&gt;Rail-fence Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/railfence.html&#34;&gt;栅栏密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2简单换位密码&#34;&gt;2、简单换位密码&lt;/h4&gt;
&lt;p&gt;密文k=“&lt;code&gt;3124&lt;/code&gt;”
明文m=“&lt;code&gt;flag{easy_easy_crypto}&lt;/code&gt;”&lt;/p&gt;
&lt;p&gt;移位密码首先以k的长度（也就是len(k)=4）切分m，具体如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flag     {eas    y_ea    sy_c    rypt      o}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总共分成了6个部分，然后按照密钥3124的顺序对每一部分都进行密钥变化。如下是变化规则&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119230841818.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;变化之后，如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flag     {eas    y_ea    sy_c    rypt      o}

lafg     ea{s    _eya    y_sc    yprt      }o
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以密文为：&lt;code&gt;lafgea{s _eyay_scyprt}o&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;3列移位密码&#34;&gt;3、列移位密码&lt;/h4&gt;
&lt;p&gt;明文 &lt;code&gt;The quick brown fox jumps over the lazy dog&lt;/code&gt;
密钥 &lt;code&gt;how are u&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;填入5行7列表(事先约定填充的行列数，如果明文不能填充完表格可以约定使用某个字母进行填充)
按how are u在字母表中的出现的先后顺序进行编号，我们就有a为1,e为2，h为3，o为4，r为5，u为6，w为7
所以先写出a列，其次e列，以此类推写出的结果便是密文&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119231129922.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;密文：&lt;code&gt;qoury inpho Tkool hbxva uwmtd cfseg erjez&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/&#34;&gt;Columnar Transposition Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/colum.html&#34;&gt;列移位密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;4曲路密码&#34;&gt;4、曲路密码&lt;/h4&gt;
&lt;p&gt;事先双方约定密钥(也就是曲路路径)
明文：&lt;code&gt;The quick brown fox jumps over the lazy dog&lt;/code&gt;
密文：&lt;code&gt;gesfc inpho dtmwu qoury zejre hbxva lookT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/20201119231315538.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;三替换密码&#34;&gt;三、替换密码&lt;/h3&gt;
&lt;h4 id=&#34;1凯撒密码&#34;&gt;1、凯撒密码&lt;/h4&gt;
&lt;p&gt;明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文&lt;/p&gt;
&lt;p&gt;明文：&lt;code&gt;The quick brown fox jumps over the lazy dog&lt;/code&gt;
偏移量：1
密文：&lt;code&gt;Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://planetcalc.com/1434/&#34;&gt;Caesar cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/caesar.html&#34;&gt;凯撒密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2rot5131847&#34;&gt;2、ROT5/13/18/47&lt;/h4&gt;
&lt;p&gt;ROT5：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。&lt;/p&gt;
&lt;p&gt;ROT13：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。&lt;/p&gt;
&lt;p&gt;ROT18：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。&lt;/p&gt;
&lt;p&gt;ROT47：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母Z，编码后变成大写字母K，当前为数字0，编码后变成符号_。用于ROT47编码的字符其ASCII值范围是33－126，具体可参考ASCII编码，&lt;/p&gt;
&lt;p&gt;下面以ROT13以例
明文：&lt;code&gt;the quick brown fox jumps over the lazy dog&lt;/code&gt;
密文：&lt;code&gt;gur dhvpx oebja sbk whzcf bire gur ynml qbt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php&#34;&gt;ROT5/13/18/47编码转换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/rot13.html&#34;&gt;Rot13密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;3qwe加密&#34;&gt;3、QWE加密&lt;/h4&gt;
&lt;p&gt;从电脑键盘上的字母从Q开始数，顺序是Q W E R T Y U I…
对应的字母顺序依次是A B C D E F G H 也就是说Q=A,W=B,E=C，依次类推&lt;/p&gt;
&lt;h4 id=&#34;4拼音九键加密&#34;&gt;4、拼音九键加密&lt;/h4&gt;
&lt;p&gt;利用字母在九键上的位置进行加密
特点：数字为偶数个，且偶数位的数小于5(九键上一个键上的字母最多是四个)&lt;/p&gt;
&lt;p&gt;例：335321414374744361715332
两个数为一组分开：33 53 21 41 43 74 74 43 61 71 53 32
对应九键进行查找：3键的第三个字母、5键的第3个字母，以此类推&lt;/p&gt;
&lt;h4 id=&#34;5埃特巴什码&#34;&gt;5、埃特巴什码&lt;/h4&gt;
&lt;p&gt;以字母倒序排列作为特殊密钥的替换加密，也称也就是下面的对应关系：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ
ZYXWVUTSRQPONMLKJIHGFEDCBA
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/&#34;&gt;Atbash Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/atbash.html&#34;&gt;埃特巴什码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;6培根密码&#34;&gt;6、培根密码&lt;/h4&gt;
&lt;p&gt;每个明文字母被一个由5字符组成的序列替换，最初的加密方式就是由’A’和’B’组成序列替换明文(所以你当然也可以用别的字母)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A = aaaaa  I/J = abaaa  R = baaaa
B = aaaab  K = abaab    S = baaab 
C = aaaba  L = ababa    T = baaba
D = aaabb  M = ababb    U/V = baabb
E = aabaa  N = abbaa    W = babaa
F = aabab  O = abbab    X = babab
G = aabba  P = abbba    Y = babba
H = aabbb  Q = abbbb    Z = babbb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://rumkin.com/tools/cipher/baconian.php&#34;&gt;Baconian Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/baconian.html&#34;&gt;培根密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;7希尔密码&#34;&gt;7、希尔密码&lt;/h4&gt;
&lt;p&gt;每个字母转换成26进制数字：A=0, B=1, C=2…Z=25
一串字母当成n维向量，跟一个n×n的矩阵相乘
再将得出的结果MOD26&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/hill-cipher/&#34;&gt;Hill Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/&#34;&gt;Cryptanalysis of the Hill Cipher&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;8猪圈密码&#34;&gt;8、猪圈密码&lt;/h4&gt;
&lt;p&gt;猪圈密码(Pigpen Cipher或称九宫格密码、朱高密码、共济会密码或共济会员密码)，是一种以格子为基础的简单替代式密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201119234953558.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201119235003816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.simonsingh.net/The_Black_Chamber/pigpen.html&#34;&gt;The BLACK Chamber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/pigpen.html&#34;&gt;猪圈密码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;变种&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201119235124125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;9圣堂武士密码&#34;&gt;9、圣堂武士密码&lt;/h4&gt;
&lt;p&gt;也算是猪圈密码的变种&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201119235451402.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;10银河字母&#34;&gt;10、银河字母&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120000439513.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;11维吉尼亚密码&#34;&gt;11、维吉尼亚密码&lt;/h4&gt;
&lt;p&gt;维吉尼亚密码(Vigenère Cipher)
在单一恺撒密码的基础上扩展出多表代换密码，根据密钥(当密钥长度小于明文长度时可以循环使用)来决定用哪一行的密表来进行替换，以此来对抗字频统计&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120001240465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
密钥(循环使用，密钥越长相对破解难度越大)：&lt;code&gt;CULTURE&lt;/code&gt;
加密过程：如果第一行为明文字母，第一列为密钥字母，那么明文字母’T’列和密钥字母’C’行的交点就是密文字母’V’，以此类推
密文：&lt;code&gt;VBP JOZGM VCHQE JQR UNGGW QPPK NYI NUKR XFK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/&#34;&gt;Cryptanalysis of the Vigenere Cipher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://planetcalc.com/2468/&#34;&gt;Vigenère cipher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.guballa.de/vigenere-solver&#34;&gt;Vigenere Solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ctf.ssleye.com/vigenere.html&#34;&gt;维吉尼亚密码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fishpond.blog.csdn.net/article/details/111193773&#34;&gt;攻防世界 Crypto高手进阶区 3分题 shanghai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;12格罗斯费尔德密码&#34;&gt;12、格罗斯费尔德密码&lt;/h4&gt;
&lt;p&gt;格罗斯费尔德密码(Gronsfeld cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际上和维吉尼亚密码相同，除了使用了数字来代替字母以外没有什么区别&lt;/li&gt;
&lt;li&gt;数字可以选择一种数列，如斐波那契数列，或者一些其他的伪随机序列&lt;/li&gt;
&lt;li&gt;格罗斯费尔德密码密码分析过程和维吉尼亚密码大同小异，不过，自动密钥密码不能使用卡西斯基算法(kasiski)来破译&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;from pycipher import Gronsfeld
&amp;gt;&amp;gt;&amp;gt;Gronsfeld([2,20,11,45,20,43,4]).encipher(&amp;#39;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&amp;#39;)
&amp;#39;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&amp;#39;
&amp;gt;&amp;gt;&amp;gt;Gronsfeld([2,20,11,45,20,43,4]).decipher(&amp;#39;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&amp;#39;)
&amp;#39;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://rumkin.com/tools/cipher/gronsfeld.php&#34;&gt;Gronsfeld Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/gronsfeld.html&#34;&gt;Gronsfeld密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;13自动密钥密码&#34;&gt;13、自动密钥密码&lt;/h4&gt;
&lt;p&gt;自动密钥密码(Autokey Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是多表替换密码，与维吉尼亚密码密切相关，但使用不同的方法生成密钥，通常来说要比维吉尼亚密码更安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动密钥密码主要有两种，关键词自动密钥密码和原文自动密钥密码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们以关键词自动密钥为例：
明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
关键词：&lt;code&gt;CULTURE&lt;/code&gt;
自动生成密钥：&lt;code&gt;CULTURE THE QUICK BROWN FOX JUMPS OVER THE&lt;/code&gt;
接下来的加密过程和维吉尼亚密码类似，从密表可得：
密文：&lt;code&gt;VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/&#34;&gt;Cryptanalysis of the Autokey Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/autokey/&#34;&gt;Autokey Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/autokey.html&#34;&gt;自动密钥密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;14博福特密码&#34;&gt;14、博福特密码&lt;/h4&gt;
&lt;p&gt;博福特密码(Beaufort Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种类似于维吉尼亚密码的代换密码，由弗朗西斯·蒲福(Francis Beaufort)发明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最知名的应用是Hagelin M-209密码机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属于对等加密，即加密演算法与解密演算法相同&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
密钥(循环使用，密钥越长相对破解难度越大)：&lt;code&gt;CULTURE&lt;/code&gt;
加密过程：如果第一行为明文字母，第一列为密文字母，那么沿明文字母’T’列出现密钥字母’C’的行号就是密文字母’J’，以此类推。
密文：&lt;code&gt;JNH DAJCS TUFYE ZOX CZICM OZHC BKA RUMV RDY&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/beaufort/&#34;&gt;Beaufort Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/beaufort.html&#34;&gt;博福特密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;15滚动密钥密码&#34;&gt;15、滚动密钥密码&lt;/h4&gt;
&lt;p&gt;滚动密钥密码(Running Key Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和维吉尼亚密码有着相同的加密机制，区别是密钥的选取，维吉尼亚使用的密钥简短，而且重复循环使用，与之相反，滚动密钥密码使用很长的密钥，比如引用一本书作为密钥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样做的目的是不重复循环使用密钥，使密文更难破译，尽管如此，滚动密钥密码还是可以被攻破，因为有关于密钥和明文的统计分析模式可供利用，如果滚动密钥密码使用统计上的随机密钥来源，那么理论上是不可破译的，因为任何可能都可以成为密钥，并且所有的可能性都是相等的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
密钥：选取C语言编程(1978版)第63页第1行”errors can occur in several places. A label has…”，去掉非字母部分作为密钥(实际选取的密钥很长，长度至少不小于明文长度)。
加密过程：加密过程和维吉尼亚密码加密过程相同
密文:&lt;code&gt;XYV ELAEK OFQYH WWK BYHTJ OGTC TJI DAK YESR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/running-key/&#34;&gt;Running Key Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/runkey.html&#34;&gt;滚动密钥密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;16夏多密码曲折加密&#34;&gt;16、夏多密码（曲折加密）&lt;/h4&gt;
&lt;p&gt;作者麦克斯韦·格兰特在中篇小说《死亡之链》塑造夏多这一英雄人物中所自创的密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120001931805.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;在以上所示的字母表密钥的底部，列有四个附加符号1，2，3，4.他们可以放在密文中的任何地方
每个附加符号指示，如何转动写有密文的纸张，再进行后续的加密或解密操作，直到出现另一个附加符号&lt;/p&gt;
&lt;p&gt;例：信文：&lt;code&gt;I AM IN DANGER.SEND HELP&lt;/code&gt;(我有危险，速来增援)
可以加密成&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120002016884.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;17波利比奥斯方阵密码&#34;&gt;17、波利比奥斯方阵密码&lt;/h4&gt;
&lt;p&gt;波利比奥斯方阵密码（Polybius Square Cipher或称波利比奥斯棋盘）&lt;/p&gt;
&lt;p&gt;棋盘密码的一种，是利用波利比奥斯方阵进行加密的密码方式，简单的来说就是把字母排列好，用坐标(行列)的形式表现出来
字母是密文，明文便是字母的坐标
常见的排布方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120003147482.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;加密实例：
明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
密文：&lt;code&gt;442315 4145241325 1242345233 213453 2445323543 442315 31115554 143422&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;18普莱菲尔密码&#34;&gt;18、普莱菲尔密码&lt;/h4&gt;
&lt;p&gt;普莱菲尔密码(Playfair Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种用于实际的双字替换密码，用双字加密取代了简单代换密码的单字加密，很明显这样使得密文更难破译&lt;/li&gt;
&lt;li&gt;又称为单方密码(Single Cipher)之后又出现它的升级版Double Playfair，也就是二方密码(Two-square Cipher),在之后又有四方密码(Four-square Cipher)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
密钥：&lt;code&gt;CULTURE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（1）编制密码表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理密钥字母C U L T U R E，去掉后面重复的字母得到：C U L T R E&lt;/li&gt;
&lt;li&gt;用上一步得到的字母自上而下来填补5乘5方表的纵列（也可横排），之后的空白按照相同的顺序用字母表中剩余的字母依次填补完整，得到如下的方格:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120002538276.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;这一步需要注意的要点：整理密钥字母时，如果出现”Z”，则需要去除，因为在英文里”Z”的使用频率最低，相应的如果是德文，则需将”I”与”J”当作一个字母来看待，而法语则去掉”W”或”K”。&lt;/p&gt;
&lt;p&gt;（2）整理明文&lt;/p&gt;
&lt;p&gt;我们要遵循的原则是“两个一组”，得到是若干个两两成对的字母段，用到的是明文THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG与字母”X“：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将明文两两一组按顺序排开，得到：TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO G&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于末尾的单个字母要加上一个”X“使之成对：TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这一步需要注意的要点：对于相连字母相同者，每个后面都需要加”X“，例如TOMORROW，需要写成：TO MO RX RX OW。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（3）编写密文&lt;/p&gt;
&lt;p&gt;我们要得到的密文，当然，对于每个字母对，要严格遵循如下的原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果两个字母在同一行则要用它右邻的字母替换，如果已在最右边，则用该行最左边的替换，如明文为”CE“，依据上表，应替换为”EG“；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果两个字母在同一列则要用它下边的字母替换，如果已在最下边，则用该行最上边的替换，如明文为”OQ“，依据上表，应替换为”PS“；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果两个字母在不同的行或列，则应在密码表中找两个字母使四个字母组成一个矩形，明文占据两个顶点，需用另外两个顶点的字母替换，如明文为”HX“，可以替换为”WI/J“或”I/JW“（下面的例子将按照横向替换原则即同行优先）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照上述原则，将明文TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX加以转换得到KU ND LH GT LF WU ES PW LH SI/J NP CG CR AG BU VZ QA I/JV（/表示或者，不过一般用I不用J，所以分析密文时你看25个字母都有而只差一个字母没有用到可以考虑一下这种加密方式）将得到的字母改为大写并五个一组列好&lt;/p&gt;
&lt;p&gt;密文&lt;code&gt;KUNDL HGTLF WUESP WLHSI NPCGC RAGBU VZQAI V&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/playfair/&#34;&gt;Playfair Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/playfair.html&#34;&gt;普莱菲尔密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;19adfgx密码&#34;&gt;19、ADFGX密码&lt;/h4&gt;
&lt;p&gt;ADFGX密码(ADFGX Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结合了改良过的Polybius方格替代密码与单行换位密码的矩阵加密密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用了5个合理的密文字母：A，D，F，G，X，这些字母之所以这样选择是因为当转译成摩尔斯电码(ADFGX密码是德国军队在一战发明使用的密码)不易混淆，目的是尽可能减少转译过程的操作错误&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加密矩阵示例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   A  D  F  G   X
  ----------------
A | p  h  q  g   m 
D | e  a  y  n   o 
F | f  d  x  k   r
G | c  v  s  z   w 
X | b  u  t  i/j l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX&lt;/code&gt;
密文：&lt;code&gt;XF AD DA AF XD XG GA FG XA FX DX GX DG FA DX FF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/adfgx-cipher/&#34;&gt;ADFGX Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/adfgx.html&#34;&gt;ADFGX密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;20adfgvx密码&#34;&gt;20、ADFGVX密码&lt;/h4&gt;
&lt;p&gt;ADFGVX密码实际上就是ADFGX密码的扩充升级版
一样具有ADFGX密码相同的特点，加密过程也类似
不同的是密文字母增加了V，使得可以再使用10数字来替换明文&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    A D F G V X
  -------------
A | p h 0 q g 6
D | 4 m e a 1 y
F | l 2 n o f d
G | x k r 3 c v
V | s 5 z w 7 b
X | j 9 u t i 8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/adfgvx.html&#34;&gt;ADFGVX密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;21双密码&#34;&gt;21、双密码&lt;/h4&gt;
&lt;p&gt;双密码(Bifid Cipher)结合了波利比奥斯方阵换位密码，并采用分级实现扩散，这里的“双”是指用2个密钥进行加密
密阵:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  1 2 3 4 5
1| p h q g m
2| e a y l n
3| o f d x k
4| r c v s z
5| w b u t i/j
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明文:&lt;code&gt;THE QUICK BROWN FOX&lt;/code&gt;
经过密阵转换：
行:&lt;code&gt;512 15543 54352 333&lt;/code&gt;
列:&lt;code&gt;421 33525 21115 214&lt;/code&gt;
分组:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;51215 54354 35233 3
42133 52521 11521 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;合并：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;5121542133 5435452521 3523311521 34
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在经过密阵转换后密文:&lt;code&gt;WETED TKZNE KYOME X&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/bifid/&#34;&gt;Bifid Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-bifid-cipher/&#34;&gt;Cryptanalysis of the Bifid cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/bifid.html&#34;&gt;双密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;22三分密码&#34;&gt;22、三分密码&lt;/h4&gt;
&lt;p&gt;三分密码(Trifid Cipher)结合换位和替换，三分密码与双密码非常相似，差别之处就是用除了3×3×3的密阵代替5×5密阵。&lt;/p&gt;
&lt;p&gt;示例密阵:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;密阵顺序 = EPSDUCVWYM.ZLKXNBTFGORIJHAQ      
 
方阵 1      方阵 2      方阵 3                                     
  1 2 3      1 2 3      1 2 3    
1 E P S    1 M . Z    1 F G O    
2 D U C    2 L K X    2 R I J    
3 V W Y    3 N B T    3 H A Q 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明文:&lt;code&gt;THE QUICK BROWN FOX.&lt;/code&gt;
经过密阵转换：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;T H E Q U I C K B R O W N F O X .
2 3 1 3 1 3 1 2 2 3 3 1 2 3 3 2 2
3 3 1 3 2 2 2 2 3 2 1 3 3 1 1 2 1
3 1 1 3 2 2 3 2 2 1 3 2 1 1 3 3 2
T(233)表示T在第一个方阵第三行第三列的
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;位置
分组(分组密钥以5为例):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;THEQU ICKBR OWNFO X.
23131 31223 31233 22
33132 22232 13311 21
31132 23221 32113 32
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;合并：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;23131 33132 31132 31223 22232 23221 31233 13311 32113 22 21 32
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在经过密阵转换后密文:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;231313313231132312232223223221312331331132113222132
N  O  O  N  W  G  B  X  X  L  G  H  H  W  S  K  W
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;23四方密码&#34;&gt;23、四方密码&lt;/h4&gt;
&lt;p&gt;四方密码(Four-Square Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类似普莱菲尔密码双字母加密密码，这样使加密效果强于其他替换密码，因为频率分析变得更加困难了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用4个预先设置的5×5字母矩阵，每个矩阵包括25个字母，通常字母’j’被融入到’i’中(维基百科上说’q’被忽略，不过这不重要，因为’q’和’j’都是很少出现的字母)，通常左上和右下矩阵式是标准字母排序明文矩阵，右上和左下矩阵是打乱顺序的密钥矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例矩阵：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120114617739.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
整理明文(分组不够时用’X’填充)：&lt;code&gt;TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX&lt;/code&gt;
加密过程：分别在明文矩阵中找到’TH’，分别找到他们在右上矩阵有左下矩阵的交点字母’ES’就是密文，以此类推。
密文：&lt;code&gt;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/four-square/&#34;&gt;Four-Square Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/&#34;&gt;Cryptanalysis of the Foursquare Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/four.html&#34;&gt;四方密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;24棋盘密码&#34;&gt;24、棋盘密码&lt;/h4&gt;
&lt;p&gt;棋盘密码（Checkerboard Cipher)是使用一个波利比奥斯方阵和两个密钥作为密阵的替换密码，通常在波利比奥斯方阵中J字母往往被包含在I字母中。&lt;/p&gt;
&lt;p&gt;示例密阵：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Q  U  I  C  K
  --------------
B |K  N I/J G  H
R |P  Q  R  S  T
O |O  Y  Z  U  A
W |M  X  W  V  B
N |L  F  E  D  C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;经过密阵替换：&lt;/p&gt;
&lt;p&gt;明文:&lt;code&gt;T H E Q U I C K B R O W N F O X&lt;/code&gt;
密文:&lt;code&gt;RK BK RU OC OC BI NK BQ WK RI OQ WI BU NU OQ WU&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;25跨棋盘密码&#34;&gt;25、跨棋盘密码&lt;/h4&gt;
&lt;p&gt;跨棋盘密码(Straddle Checkerboard Cipher)是一种替换密码，当这种密码在结合其他加密方式，加密效果会更好。&lt;/p&gt;
&lt;p&gt;棋盘示例(选择3和7作为变换):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   0 1 2 3 4 5 6 7 8 9
   f k m   c p d   y e
3: h b i g q r o s a z
7: l u t j n w v x    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明文: &lt;code&gt;T H E Q U I C K B R O W N F O X&lt;/code&gt;
经过加密棋盘替换得到密文:&lt;code&gt;72 30 9 34 71 32 4 1 31 35 36 75 74 0 36 77&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然我们还可以继续用其他的加密方式在对跨棋盘密码加密出的结果再进行加密:
示例变换密钥:&lt;code&gt;83729&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; 8372983729837298372983729837
+7230934713241313536757403677
-----------------------------
 5502817432078501808630122404
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在经过棋盘转换后：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;5502817432078501808630122404
ppfmyk n if  pfkyfyd hkmmcfc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终得到密文：&lt;code&gt;ppfmyk n in pfkyfyd hkmmcfc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/straddle-checkerboard/&#34;&gt;Straddle Checkerboard Cipher&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;26云影密码&#34;&gt;26、云影密码&lt;/h4&gt;
&lt;p&gt;采用的是0作间隔，其他非0数隔开后组合起来相加表示26个字母&lt;/p&gt;
&lt;p&gt;脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
#!/usr/bin/python
# -*- coding=utf8 -*-
&amp;#34;&amp;#34;&amp;#34;
# @Author : pig
# @CreatedTime:2019-11-2423:54:02
# @Description : 
&amp;#34;&amp;#34;&amp;#34;


def de_code(c):
    dic = [chr(i) for i in range(ord(&amp;#34;A&amp;#34;), ord(&amp;#34;Z&amp;#34;) + 1)]
    flag = []
    c2 = [i for i in c.split(&amp;#34;0&amp;#34;)]
    for i in c2:
        c3 = 0
        for j in i:
            c3 += int(j)
        flag.append(dic[c3 - 1])
    return flag

def encode(plaintext):
    dic = [chr(i) for i in range(ord(&amp;#34;A&amp;#34;), ord(&amp;#34;Z&amp;#34;) + 1)]
    m = [i for i in plaintext]
    tmp = [];flag = []
    for i in range(len(m)):
        for j in range(len(dic)):
            if m[i] == dic[j]:
                tmp.append(j + 1)
    for i in tmp:
        res = &amp;#34;&amp;#34;
        if i &amp;gt;= 8:
            res += int(i/8)*&amp;#34;8&amp;#34;
        if i%8 &amp;gt;=4:
            res += int(i%8/4)*&amp;#34;4&amp;#34;
        if i%4 &amp;gt;=2:
            res += int(i%4/2)*&amp;#34;2&amp;#34;
        if i%2 &amp;gt;= 1:
            res += int(i%2/1)*&amp;#34;1&amp;#34;
        flag.append(res + &amp;#34;0&amp;#34;)
    print (&amp;#34;&amp;#34;.join(flag)[:-1])

c = input(&amp;#34;输入要解密的数字串:&amp;#34;)
print (de_code(c))
m_code = input(&amp;#34;请输入要加密的数字串:&amp;#34;)
encode(m_code)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120115307336.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;27porta密码&#34;&gt;27、Porta密码&lt;/h4&gt;
&lt;p&gt;Porta密码(Porta Cipher)是一个由意大利那不勒斯的医生Giovanni Battista della Porta发明的多表代换密码
Porta密码具有加密解密过程的是相同的特点&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120115627515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;明文：&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
密钥(循环使用，密钥越长相对破解难度越大)：&lt;code&gt;CULTURE&lt;/code&gt;
加密过程：明文字母’T’列与密钥字母’C’行交点就是密文字母’F’,以此类推。
密文：&lt;code&gt;FRW HKQRY YMFMF UAA OLWHD ALWI JPT ZXHC NGV&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/porta/&#34;&gt;Porta Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/porta.html&#34;&gt;Porta密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;28仿射密码&#34;&gt;28、仿射密码&lt;/h4&gt;
&lt;p&gt;仿射密码(Affine Cipher)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种单表代换密码，字母表中的每个字母相应的值使用一个简单的数学函数映射到对应的数值，再把对应数值转换成字母&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个公式意味着每个字母加密都会返回一个相同的字母，意义着这种加密方式本质上是一种标准替代密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此，它具有所有替代密码的弱点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每一个字母都是通过函数（ax + b）mod m加密，其中B是位移量，为了保证仿射密码的可逆性，a和m需要满足gcd(a , m)=1，一般m为设置为26&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以E(x) = (5x + 8) mod 26函数为例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120120133575.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;解密用D(x)=21(x - 8) mod 26&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.practicalcryptography.com/ciphers/classical-era/affine/&#34;&gt;Affine Cipher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/affine.html&#34;&gt;仿射密码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;29bazeries密码&#34;&gt;29、Bazeries密码&lt;/h4&gt;
&lt;p&gt;Bazeries密码(Bazeries Cipher)是换位密码和替换密码的组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用两个波利比奥斯方阵，一个明文字母方阵&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用一个随机的数字(一般小于1000000)的生成一个密钥矩阵同时作为第一轮明文划分分组，比如2333这个数字翻译为英文便是TWO THOUSAND THREE HUNDRED THIRTY THREE,从第一个字母T开始选取不重复的字母，之后再从字母表中按序选取没有出现的字母组成密钥矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;明文:&lt;code&gt;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&lt;/code&gt;
随机数字:&lt;code&gt;2333&lt;/code&gt;
明文矩阵:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A  F  L  Q  V
B  G  M  R  W
C  H  N  S  X
D I/J O  T  Y
E  K  P  U  Z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例密钥矩阵：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;T  W  O  H  U
S  A  N  D  R
E I/J Y  B  C
F  G  K  L  M
P  Q  V  X  Z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明文分组：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2      3      3    3        2    3     3       3    2     3    3      3
TH EQU ICK BRO WN FOX JUM PSO VE RTH ELA ZYD OG
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分组明文反序:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HT UQE KCI ORB WN XOF MUJ OSP EV EHT ALE DYZ GO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用密钥矩阵替换:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;IL XHP QEG KDS YR CKW NXG KBV PU ILD TOP FMZ AK
(比如’H’在明文矩阵对应到密钥矩阵的位置就是’I’）
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;30当铺密码&#34;&gt;30、当铺密码&lt;/h4&gt;
&lt;p&gt;当铺密码 就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;王夫 井工 夫口 由中人 井中 夫夫 由中大
67 84 70 123 82 77 125
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;四现代密码&#34;&gt;四、现代密码&lt;/h3&gt;
&lt;h4 id=&#34;1rsa&#34;&gt;1、RSA&lt;/h4&gt;
&lt;p&gt;RSA是目前最有影响力和最常用的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。&lt;/p&gt;
&lt;p&gt;今天只有短的RSA钥匙才可能被强力方式解破。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。目前普遍认为，模式n至少应该取1024位，最好是2048位。但在分布式计算和量子计算机理论日趋成熟的今天，RSA加密安全性受到了挑战和质疑。&lt;/p&gt;
&lt;p&gt;RSA算法基于一个十分简单的数论事实:将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥&lt;/p&gt;
&lt;p&gt;脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import libnum
from Crypto.Util.number import long_to_bytes

q = int(&amp;#34;0xa6055ec186de51800ddd6fcbf0192384ff42d707a55f57af4fcfb0d1dc7bd97055e8275cd4b78ec63c5d592f567c66393a061324aa2e6a8d8fc2a910cbee1ed9&amp;#34;,16)
p = int(&amp;#34;0xfa0f9463ea0a93b929c099320d31c277e0b0dbc65b189ed76124f5a1218f5d91fd0102a4c8de11f28be5e4d0ae91ab319f4537e97ed74bc663e972a4a9119307&amp;#34;,16)

e = int(&amp;#34;0x6d1fdab4ce3217b3fc32c9ed480a31d067fd57d93a9ab52b472dc393ab7852fbcb11abbebfd6aaae8032db1316dc22d3f7c3d631e24df13ef23d3b381a1c3e04abcc745d402ee3a031ac2718fae63b240837b4f657f29ca4702da9af22a3a019d68904a969ddb01bcf941df70af042f4fae5cbeb9c2151b324f387e525094c41&amp;#34;,16)

c = 0x7fe1a4f743675d1987d25d38111fae0f78bbea6852cba5beda47db76d119a3efe24cb04b9449f53becd43b0b46e269826a983f832abb53b7a7e24a43ad15378344ed5c20f51e268186d24c76050c1e73647523bd5f91d9b6ad3e86bbf9126588b1dee21e6997372e36c3e74284734748891829665086e0dc523ed23c386bb520

n = q*p
 
d = libnum.invmod(e, (p - 1) * (q - 1))
m = pow(c, d, n)   # m 的十进制形式
string = long_to_bytes(m)  # m明文
print(string)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tool.chacuo.net/cryptrsapubkey&#34;&gt;在线RSA公钥加密解密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tool.chacuo.net/cryptrsaprikey&#34;&gt;在线RSA私钥加密解密&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2aes&#34;&gt;2、AES&lt;/h4&gt;
&lt;p&gt;在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院(NIST)于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。&lt;/p&gt;
&lt;p&gt;aes密文包括字母 数字 + = /等&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/block2016/p/5596676.html&#34;&gt;AES加密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tool.oschina.net/encrypt/&#34;&gt;在线加密解密&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;3des&#34;&gt;3、DES&lt;/h4&gt;
&lt;p&gt;DES算法为密码体制中的对称密码体制，又被称为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。 明文按64位进行分组，密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）分组后的明文组和56位的密钥按位替代或交换的方法形成密文组的加密方法&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_27570955/article/details/52442092&#34;&gt;DES算法原理完整版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tool.chacuo.net/cryptdes&#34;&gt;在线DES加密解密&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;4ecc&#34;&gt;4、ECC&lt;/h4&gt;
&lt;p&gt;ECC（Elliptic Curves Cryptography，椭圆曲线密码编码学）
椭圆加密算法(ECC)是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，其数学基础是利用椭圆曲线上的有理点构成Abel加法群上椭圆离散对数的计算困难性
公钥密码体制根据其所依据的难题一般分为三类:大整数分解问题类、离散对数问题类、椭圆曲线类
有时也把椭圆曲线类归为离散对数类&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_35413770/article/details/103668392&#34;&gt;ECC(椭圆曲线密码编码学)简介&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5rc4&#34;&gt;5、RC4&lt;/h4&gt;
&lt;p&gt;RC4（来自Rivest Cipher 4的缩写）是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wenku.baidu.com/view/404a49828762caaedd33d4c2.html&#34;&gt;RC4算法总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/rc4.html&#34;&gt;RC4加解密&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;五代码混淆加密&#34;&gt;五、代码混淆加密&lt;/h3&gt;
&lt;h4 id=&#34;1vbscriptencode解密&#34;&gt;1、VBScript.Encode解密&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://adophper.com/encode.html&#34;&gt;VBScript.Encode解密&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2ppencode&#34;&gt;2、ppencode&lt;/h4&gt;
&lt;p&gt;ppencode-Perl把Perl代码转换成只有英文字母的字符串&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120121851895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://namazu.org/~takesako/ppencode/demo.html&#34;&gt;ppencode - JavaScript demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/ppencode.html&#34;&gt;PPencode&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;3rrencode&#34;&gt;3、rrencode&lt;/h4&gt;
&lt;p&gt;rrencode可以把ruby代码全部转换成符号&lt;/p&gt;
&lt;p&gt;暂时没找到网站
之前有个挂了&lt;/p&gt;
&lt;h4 id=&#34;4jjencode&#34;&gt;4、jjencode&lt;/h4&gt;
&lt;p&gt;jjencode将JS代码转换成只有符号的字符串
jjencode的解密直接在浏览器的控制台里输入密文即可执行解密&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120122322824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/jjencode.html&#34;&gt;JJencode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pferrie2.tripod.com/papers/jjencode.pdf&#34;&gt;MALWARE ANALYSIS&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5aaencode颜文字&#34;&gt;5、aaencode/颜文字&lt;/h4&gt;
&lt;p&gt;aaencode的解密直接在浏览器的控制台里输入密文即可执行解密&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2020112012253056.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://utf-8.jp/public/aaencode.html&#34;&gt;aaencode demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cat-in-136.github.io/2010/12/aadecode-decode-encoded-as-aaencode.html&#34;&gt;aadecode - Decode encoded-as-aaencode JavaScript program. &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/aaencode.html&#34;&gt;AAencode&lt;/a&gt;&lt;a href=&#34;http://ctf.ssleye.com/aaencode.html&#34;&gt;http://ctf.ssleye.com/aaencode.html&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;6jsfuck&#34;&gt;6、JSfuck&lt;/h4&gt;
&lt;p&gt;JSFuck 可以让你只用 6 个字符&lt;a href=&#34;&#34;&gt; &lt;/a&gt; ! +来编写 JavaScript 程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120122610268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jsfuck.com/&#34;&gt;JSFuck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/jsfuck.html&#34;&gt;JSfuck&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;7jother&#34;&gt;7、jother&lt;/h4&gt;
&lt;p&gt;jother是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式
其中8个少量字符包括：&lt;code&gt;! + ( ) [ ] { }&lt;/code&gt;，只用这些字符就能完成对任意字符串的编码
直接在浏览器(f12)的控制台里输入密文即可执行解密&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120122904825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tmxk.org/jother/&#34;&gt;jother&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;8brainfuck&#34;&gt;8、brainfuck&lt;/h4&gt;
&lt;p&gt;Brainfuck是一种极小化的计算机语言，按照”Turing complete（完整图灵机）”思想设计的语言
它的主要设计思路是：用最小的概念实现一种“简单”的语言
Brainfuck只有八种符号，所有的操作都由这八种符号&lt;code&gt;&amp;gt; &amp;lt; + - . , [ ]&lt;/code&gt;的组合来完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120123130406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.splitbrain.org/services/ook&#34;&gt;Brainfuck/Ook! Obfuscation/Encoding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/brain.html&#34;&gt;Brainfuck&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;9ook&#34;&gt;9、Ook!&lt;/h4&gt;
&lt;p&gt;Ook! 与Brainfuck类似, 但用单词“Ook！”，“Ook.” 和“Ook?”代替&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120123546215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.splitbrain.org/services/ook&#34;&gt;Brainfuck/Ook! Obfuscation/Encoding&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;10bubble-babble&#34;&gt;10、Bubble Babble&lt;/h4&gt;
&lt;p&gt;Bubble Babble&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由Antti Huima创建的一种编码方法，可以把二进制信息表示为由交替的元音和辅音组成的伪词（pseudo-words）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主要用于密码指纹，其编码也具有内置的纠错和冗余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码格式每5个字符中间以-来分隔，作者的原意就是想把难以记得的二进制数据表示为难忘的伪词&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201120125220286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/eur0pa/bubblepy&#34;&gt;bubblepy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/bubble.html&#34;&gt;BubbleBabble&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;六其他&#34;&gt;六、其他&lt;/h3&gt;
&lt;h4 id=&#34;1与佛论禅&#34;&gt;1、与佛论禅&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://www.keyfc.net/bbs/tools/tudoucode.aspx&#34;&gt;与佛论禅&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2020111919563157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2文本加密&#34;&gt;2、文本加密&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://www.qqxiuzi.cn/bianma/wenbenjiami.php&#34;&gt;文本加密&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201119230115963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3核心价值观密码&#34;&gt;3、核心价值观密码&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://ctf.ssleye.com/cvencode.html&#34;&gt;核心价值观密码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20201119235808232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4恩尼格码密码&#34;&gt;4、恩尼格码密码&lt;/h4&gt;
&lt;p&gt;恩尼格玛密码机（德语：Enigma，又译哑谜机，或“谜”式密码机）是一种用于加密与解密文件的密码机。确切地说，恩尼格玛是对二战时期纳粹德国使用的一系列相似的转子机械加解密机器的统称，它包括了许多不同的型号，为密码学对称加密算法的流加密&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://enigmaco.de/enigma/enigma.html&#34;&gt;模拟&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5兽音译者&#34;&gt;5、兽音译者&lt;/h4&gt;
&lt;p&gt;给我笑死&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://hi.pcmoe.net/roar.html&#34;&gt;兽音译者&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210416204016321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDYwNDU0MQ==,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;6原神特瓦特语言&#34;&gt;6、原神特瓦特语言&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://p1um3r.github.io/images/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/1701521208407.jpg&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;
&lt;p&gt;对常见的编码和密码做了个归纳&lt;/p&gt;
&lt;p&gt;一些好用的网站和工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web2hack.org/xssee/&#34;&gt;https://web2hack.org/xssee/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sojson.com/&#34;&gt;json在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web.chacuo.net/&#34;&gt;程默的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CaptfEncoder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jameslyons/python_cryptanalysis&#34;&gt;python_cryptanalysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.thonky.com/kryptos/&#34;&gt;Kryptos and Cryptanalysis Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rumkin.com/tools/cipher/&#34;&gt;Cipher Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://encode.chahuo.com/&#34;&gt;在线加密解密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原文链接：https://blog.csdn.net/weixin_44604541/article/details/109817480&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Typora 使用说明</title>
      <link>https://p1um3r.github.io/blog/typora-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 11 Apr 2023 08:00:00 +0800</pubDate>
      
      <guid>https://p1um3r.github.io/blog/typora-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>&lt;h1 id=&#34;typora-使用说明&#34;&gt;Typora 使用说明&lt;/h1&gt;
&lt;h3 id=&#34;标题&#34;&gt;标题&lt;/h3&gt;
&lt;p&gt;标题语法了解html都不陌生，有点儿类似，h1~h6类似这边的#号。数字越小（#号越少）标题越大，分六个等级。
定义标题有以下几种方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;方式一：这个标题手敲就在文本前边敲#号，#和文本中间需又空格隔开。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;方式二：快捷键，Ctrl+(1~6)。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;方式三：增大标题级别：Ctr+=；减少标题级别：Ctrl+-;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt; 方式四：在Typora文本编辑区右键鼠标，选择段落也可以插入标题。不止标题，还有其他样式设置&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt; 方式五：在编辑器中左上角的菜单栏选择段落去插入标题。不止标题，还有其他样式设置&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两种方式应该比较常用（推荐），后两种适合小白 \textcolor{red}{前两种方式应该比较常用（推荐），后两种适合小白}&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标题&lt;/th&gt;
&lt;th&gt;语法（方式一）&lt;/th&gt;
&lt;th&gt;快捷键（方式二）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;一级标题&lt;/td&gt;
&lt;td&gt;#一级标题&lt;/td&gt;
&lt;td&gt;Ctrl+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二级标题&lt;/td&gt;
&lt;td&gt;##二级标题&lt;/td&gt;
&lt;td&gt;Ctrl+2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三级标题&lt;/td&gt;
&lt;td&gt;###三级标题&lt;/td&gt;
&lt;td&gt;Ctrl+3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;四级标题&lt;/td&gt;
&lt;td&gt;####四级标题&lt;/td&gt;
&lt;td&gt;Ctrl+4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;五级标题&lt;/td&gt;
&lt;td&gt;#####五级标题&lt;/td&gt;
&lt;td&gt;Ctrl+5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;六级标题&lt;/td&gt;
&lt;td&gt;######六级标题&lt;/td&gt;
&lt;td&gt;Ctrl+6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;字体样式斜体加粗下划线删除线等&#34;&gt;字体样式（斜体，加粗，下划线，删除线等）&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;字体&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;语法（方式一）&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;快捷键（方式二）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;斜体&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;*文本*&lt;/code&gt;或&lt;code&gt;_文本_&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ctrl+I&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加粗&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;**文本**&lt;/code&gt;或&lt;code&gt;__文本__&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ctrl+B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;下划线&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;u&amp;gt;文本&amp;lt;/u&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ctrl+U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除线&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;~~文本~~&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Alt+Shift+5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加粗斜体&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;***文本***&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高亮&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;==文本==&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备注：需勾选高亮设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文本居中&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&amp;lt;center&amp;gt;文本&amp;lt;/center&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文本颜色修改&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;$\textcolor{颜色}{文本}$&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备注：需勾选内联公式设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;清除文本样式&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文本&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;\&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;文本颜色修改&#34;&gt;文本颜色修改&lt;/h5&gt;
&lt;p&gt;$\textcolor{GreenYellow}{GreenYellow}，\textcolor{Yellow}{Yellow}，\textcolor{Goldenrod}{Goldenrod},\textcolor{Dandelion}{Dandelion}， \textcolor{Apricot}{Apricot}， \textcolor{Peach}{Peach}， \textcolor{Melon}{Melon}， \textcolor{YellowOrange}{YellowOrange}， $$\textcolor{Orange}{Orange}，\textcolor{BurntOrange}{BurntOrange}，\textcolor{Bittersweet}{Bittersweet}，\textcolor{RedOrange}{RedOrange}，\textcolor{Mahogany}{Mahogany}，\textcolor{Maroon}{Maroon}，\textcolor{BrickRed}{BrickRed}，\textcolor{Red}{Red}$，$\textcolor{OrangeRed}{OrangeRed}， \textcolor{RubineRed}{RubineRed}， \textcolor{WildStrawberry}{WildStrawberry}，\textcolor{Salmon}{Salmon}，\textcolor{CarnationPink}{CarnationPink}， \textcolor{Magenta}{Magenta}，\textcolor{VioletRed}{VioletRed}$， $\textcolor{Rhodamine}{Rhodamine}， \textcolor{Mulberry}{Mulberry}，\textcolor{RedViolet}{RedViolet}， \textcolor{Fuchsia}{Fuchsia}， \textcolor{Lavender}{Lavender}，\textcolor{Thistle}{Thistle}，\textcolor{Orchid}{Orchid}，\textcolor{DarkOrchid}{DarkOrchid}$,$\textcolor{Purple}{Purple}，\textcolor{Plum}{Plum}，\textcolor{Violet}{Violet}，\textcolor{RoyalPurple}{RoyalPurple}，\textcolor{BlueViolet}{BlueViolet}，\textcolor{Periwinkle}{Periwinkle}， \textcolor{CadetBlue}{CadetBlue}，\textcolor{CornflowerBlue}{CornflowerBlue}$，$\textcolor{MidnightBlue}{MidnightBlue}，\textcolor{NavyBlue}{NavyBlue}，\textcolor{RoyalBlue}{RoyalBlue}，\textcolor{Blue}{Blue}，\textcolor{Cerulean}{Cerulean}，\textcolor{Cyan}{Cyan}，\textcolor{ProcessBlue}{ProcessBlue}，\textcolor{SkyBlue}{SkyBlue}$，$\textcolor{Turquoise}{Turquoise}，\textcolor{TealBlue}{TealBlue}，\textcolor{Aquamarine}{Aquamarine}，\textcolor{BlueGreen}{BlueGreen}，\textcolor{Emerald}{Emerald}，\textcolor{JungleGreen}{JungleGreen}，\textcolor{SeaGreen}{SeaGreen}，\textcolor{Green}{Green}$，$\textcolor{ForestGreen}{ForestGreen}，\textcolor{PineGreen}{PineGreen}，\textcolor{LimeGreen}{LimeGreen}，\textcolor{YellowGreen}{YellowGreen}，\textcolor{SpringGreen}{SpringGreen}，\textcolor{OliveGreen}{OliveGreen}，\textcolor{RawSienna}{RawSienna}$，$\textcolor{Sepia}{Sepia}，\textcolor{Brown}{Brown}，\textcolor{Tan}{Tan}，\textcolor{Gray}{Gray}，\textcolor{Black}{Black}$&lt;/p&gt;
&lt;p&gt;当然颜色还有很多就不一一举例了，上边是这些颜色的单词(如上黑体没正常显示的在Typora上都会正常显示)，根据更换字体颜色的语法去讲单词写入语法中，就出现如上效果，大小写不区分。如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$\textcolor{black}{文本}$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$\textcolor{#00fcfc}{文本}$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$\textcolor{rgb(255,0,0)}{文本}$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这边就列这如上三种常用颜色选择器模式，注意这块需要更改设置才能识别到字体样式，需要在Typora软件里更改设置。在左上角菜单栏里选择。&lt;/p&gt;
&lt;p&gt;设置步骤：文件——&amp;gt;偏好设置——&amp;gt;&lt;em&gt;M&lt;strong&gt;a&lt;/strong&gt;r&lt;strong&gt;k&lt;/strong&gt;d&lt;strong&gt;o&lt;/strong&gt;wn&lt;/em&gt;——&amp;gt;勾选内联公式即可；识别高亮语法设置同理勾选高亮即可。操作如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/d6e8fa7f3763440689739be96259cb92.jpeg#pic_center&#34; alt=&#34;高亮操作步骤&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;插入内容&#34;&gt;插入内容&lt;/h3&gt;
&lt;h5 id=&#34;插入列表&#34;&gt;&lt;strong&gt;插入列表&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;有序列表：正常插入即可，如&lt;code&gt;1.&lt;/code&gt;，&lt;code&gt;2.&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;无序列表：使用&lt;code&gt;+&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;*&lt;/code&gt;都可以创建无序列表；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，如果已使用一级无序列，可以直接回车+&lt;code&gt;Tab&lt;/code&gt;,调至二级无序列表；&lt;/p&gt;
&lt;p&gt;如果已使用二级无序列，可以&lt;code&gt;shift&lt;/code&gt;+&lt;code&gt;Tab&lt;/code&gt;回到上一级；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任务列表：依次输入&lt;code&gt;-&lt;/code&gt;+&lt;code&gt;空格&lt;/code&gt;+&lt;code&gt;[空格]&lt;/code&gt;+&lt;code&gt;空格&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;增加缩进：&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;]&lt;/code&gt; ; 减少缩进：&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;[&lt;/code&gt;;&lt;/p&gt;
&lt;h5 id=&#34;插入代码和代码块&#34;&gt;&lt;strong&gt;插入代码和代码块&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;代码表示，即在A的前后加&lt;code&gt;飘号&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;代码块表示:(偏好里可设置是否自动标号)
&lt;ul&gt;
&lt;li&gt;三个&lt;code&gt;飘号&lt;/code&gt;+&lt;code&gt;代码类型&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;快捷键：&lt;code&gt;Ctrl+Shift+K&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;插入表格&#34;&gt;&lt;strong&gt;插入表格&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;输入&lt;code&gt;|表头1|表头2|&lt;/code&gt;并回车，即可创建一个包含2列表；&lt;/li&gt;
&lt;li&gt;直接弹出对话框&lt;code&gt;Ctrl+T&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;表格内对齐方式&#34;&gt;&lt;strong&gt;表格内对齐方式&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;左对齐：&lt;code&gt;:|&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右对齐：&lt;code&gt;|:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中对齐：&lt;code&gt;:|:&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;插入数学公式&#34;&gt;&lt;strong&gt;插入数学公式&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;行间：直接输入&lt;code&gt;$$&lt;/code&gt;并回车，即可打开公式输入框，公式按照[LaTex公式语法](&lt;a href=&#34;https://zhuanlan.zhihu.com/p/110756681#:~:text=&#34;&gt;https://zhuanlan.zhihu.com/p/110756681#:~:text=&lt;/a&gt; 在LaTeX数学模式中，公式有两种形式——行内公式和行间公式。,前者公式嵌入在行内，适用于简单短小的公式；后者居中独占一行，适用于比较长或重要的公式。 公式中的空格均会被忽略，可以使用命令quad或qquad实现)输入;&lt;/li&gt;
&lt;li&gt;行内：直接输入&lt;code&gt;$&lt;/code&gt;+LaTex公式+&lt;code&gt;$&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;快捷键：&lt;code&gt;Ctrl+Shift+M&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;插入链接&#34;&gt;&lt;strong&gt;插入链接&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;行内式：[网址名字]+(链接)；&lt;/p&gt;
&lt;p&gt;欢迎来到百度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跳转功能&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超链接跳转，即插入上述链接；&lt;/li&gt;
&lt;li&gt;参考式链接跳转，输入[名字描述]+[标号]，再Ctrl+单击跳转至末尾添加地址；例如，CSDN跳转介绍;&lt;/li&gt;
&lt;li&gt;本地文件跳转（未成功），[Readme1]+(文件路径)；例如[优化控制][D:\3Typora笔记\优化控制.md]；&lt;/li&gt;
&lt;li&gt;制作锚点，任意跳转：输入&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;标记锚点，在需要跳转此处的地方输入&lt;!-- raw HTML omitted --&gt;显示文字&lt;!-- raw HTML omitted --&gt;；例如，加粗；
&lt;ul&gt;
&lt;li&gt;注：当锚点文字是文中文字时，可以不用设置锚点，直接输入代码实现跳转~~ 例如，跳转至标题分级；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;插入表情&#34;&gt;&lt;strong&gt;插入表情&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在表情单词的前后输入两个&lt;code&gt;:&lt;/code&gt;，能够找到对应表情，如&lt;code&gt;:smile:&lt;/code&gt; :smile:&lt;/p&gt;
&lt;h5 id=&#34;插入图片&#34;&gt;&lt;strong&gt;插入图片&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;输入&lt;code&gt;!&lt;/code&gt;+&lt;code&gt;[显示的文字]&lt;/code&gt;+&lt;code&gt;(图片地址)&lt;/code&gt;;快捷键：&lt;code&gt;Ctrle&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;I&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;建议直接拖拽图片进来~&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;插入目录&#34;&gt;&lt;strong&gt;插入目录&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;输入&lt;code&gt;[toc]&lt;/code&gt;并回车，自动在当前位置创建目录；&lt;/p&gt;
&lt;h5 id=&#34;插入代码块&#34;&gt;插入代码块&lt;/h5&gt;
&lt;p&gt;快捷键：输入```+ 回车（ 可以选择代码语言）&lt;/p&gt;
&lt;h3 id=&#34;标注&#34;&gt;标注&lt;/h3&gt;
&lt;h5 id=&#34;引用文字&#34;&gt;&lt;strong&gt;引用文字&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;可以用来表示内容的递进关系:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;+&lt;code&gt;空格&lt;/code&gt;+引用文字；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;Q&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;分割线&#34;&gt;&lt;strong&gt;分割线&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;输入&lt;code&gt;***&lt;/code&gt;或者&lt;code&gt;---&lt;/code&gt;并回车；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分别在A前后输入&lt;code&gt;~~&lt;/code&gt;或者使用快捷键：&lt;code&gt;Alt&lt;/code&gt;+&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;5&lt;/code&gt;;&lt;/p&gt;
&lt;h5 id=&#34;标注上下标&#34;&gt;&lt;strong&gt;标注上下标&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;+A+&lt;code&gt;&amp;lt;/sup&amp;gt;&lt;/code&gt;；&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;+A+&lt;code&gt;&amp;lt;/sub&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议打开设置：（需设置）在需要标注的A前后加入&lt;code&gt;^&lt;/code&gt;表示上标；&lt;code&gt;~&lt;/code&gt;表示下标；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;typora简单偏好设置&#34;&gt;typora简单偏好设置&lt;/h3&gt;
&lt;h5 id=&#34;1让大纲看起来更舒服&#34;&gt;1.让大纲看起来更舒服&lt;/h5&gt;
&lt;p&gt;Typora的文件—&amp;raquo;&amp;gt;偏好设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/5c7b0d7088d241f1bbb00b8be55b8a5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5L2g5oiR5pyJ54y_,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;2自动保存需要重启typora&#34;&gt;2.自动保存（需要重启Typora)&lt;/h5&gt;
&lt;h5 id=&#34;在这里插入图片描述httpsimg-blogcsdnimgcn4b6699fc9fc44cbbb7b2481d43866891pngpic_center&#34;&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/4b6699fc9fc44cbbb7b2481d43866891.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/h5&gt;
&lt;h5 id=&#34;3调试功能及使用需要重启typora&#34;&gt;3.调试功能及使用（需要重启Typora)&lt;/h5&gt;
&lt;p&gt;（1）勾选开启调试模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/b696544d550c4d4d93e6bfbbc786dec0.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）右键点击检查&lt;/p&gt;
&lt;p&gt;（3）小箭头定位元素&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/e63ec5f762e644e1a1cf631a39d56e84.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5L2g5oiR5pyJ54y_,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;（4）定位后 可在Style中修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/317e7bc12aa44668a6bd642e62bb2d90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5L2g5oiR5pyJ54y_,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;(5) 但是关闭重启Typora后，修改的效果会消失&lt;/p&gt;
&lt;p&gt;若想永久生效需要修改主题文件&lt;/p&gt;
&lt;p&gt;文件-》偏好设置-》外观-》打开主题文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/960724506a24424cb53efcf70da4297d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5L2g5oiR5pyJ54y_,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当前使用谁就修改它的内容&lt;/p&gt;
&lt;p&gt;原文链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/dc_12138/article/details/124263439&#34;&gt;https://blog.csdn.net/dc_12138/article/details/124263439&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/CxNingSX/article/details/126018046&#34;&gt;https://blog.csdn.net/CxNingSX/article/details/126018046&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/YUEsheng416/article/details/124870862&#34;&gt;https://blog.csdn.net/YUEsheng416/article/details/124870862&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>欧几里得算法（gcd）</title>
      <link>https://p1um3r.github.io/blog/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95gcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://p1um3r.github.io/blog/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95gcd/</guid>
      <description>&lt;h1 id=&#34;欧几里得算法gcd&#34;&gt;欧几里得算法（gcd）&lt;/h1&gt;
&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;欧几里得算法又称辗转相除法，是指用于计算两个非负整数a，b的最大公约数。应用领域有数学和计算机两个方面。计算公式$\gcd(a,b) = \gcd(b,a \bmod b)$。&lt;/p&gt;
&lt;h2 id=&#34;二原理&#34;&gt;二、原理&lt;/h2&gt;
&lt;p&gt;两个整数的最大公约数等于其中较小的数和两数相除余数的最大公约数。&lt;/p&gt;
&lt;p&gt;假设有两个正整数$a,b$，我们求它们的最大公约数，a可以表示成如下形式：
$$
a = b*k+r
$$
当$r$不等于$0$时，$a=b,b=r$，一直递归下去&lt;/p&gt;
&lt;p&gt;因为
$$
r = a - kb
$$
他们有同一个最大公约数$d$，即
$$
r / d = （a-kb）/ d = a/d - kb / d
$$
可以一直类推，直到$r == 0$时，$b$就为最大公约数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e2/Euclidean_algorithm_252_105_animation_flipped.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1、$252$和$105$的最大公约数是$21$$（252=21×12;105=21×5）$,因为$252−105=21×(12−5)=147$，所以$147$和$105$的最大公约数也是$21$。在这个过程中，较大的数缩小了，所以继续进行同样的计算可以不断缩小这两个数直至余数为零。这时，所剩下的还没有变成零的数就是两数的最大公约数。由辗转相除法也可以推出，两数的最大公约数可以用两数的整数倍相加来表示，如$21=5×105+(−2)×252$。这个重要的结论叫做&lt;strong&gt;裴蜀定理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2、计算$a = 1071$和$b = 462$的最大公约数的过程如下：从1071中不断减去462直到小于462（可以减2次，即商$q_0 = 2$），余数是$147$：
$$
1071=2\times 462 + 147
$$
然后从462中不断减去147直到小于147（可以减3次，即$q_1 = 3$，余数是21：
$$
462=3\times 147 +21
$$
再从147中不断减去21直到小于21（可以减7次，即$q_2 = 7$），没有余数：
$$
147 = 7\times 21 +0
$$
此时，余数是0，所以1071和462的最大公约数是21，这和用素因数分解得出的结果相同用表格表示如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤数&lt;/th&gt;
&lt;th&gt;算式&lt;/th&gt;
&lt;th&gt;商和余数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;td&gt;$1071=462q_0+r_0$&lt;/td&gt;
&lt;td&gt;$q_0=2、r_0=147$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;td&gt;$462=147q_1+r_1$&lt;/td&gt;
&lt;td&gt;$q_1=3、r_1=21$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$2$&lt;/td&gt;
&lt;td&gt;$1147=21q_2+r_2$&lt;/td&gt;
&lt;td&gt;$q_2=7、r_2=0$（算法终止）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;三代码实现&#34;&gt;三、代码实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;python&#34;&gt;python&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(a, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(t &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;四扩展欧几里得算法&#34;&gt;四、扩展欧几里得算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已知整数$a、b$，扩展欧几里得算法可以在求得$a、b$的最大公约数的同时，找到整数$x、y$（其中一个可能是负数），使它们满足&lt;strong&gt;裴蜀等式&lt;/strong&gt;$ax+by=gcd(a,b)$。如果a是负数，可以把问题转化成$\abs{a}(-x)+by=\gcd(\abs{a},b)$（$\abs{a}$为a的绝对值），然后令$x&amp;rsquo;=(-x)$&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>